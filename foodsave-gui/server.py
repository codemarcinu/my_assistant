#!/usr/bin/env python3
"""
FoodSave AI GUI Server
Serwer dla intuicyjnego GUI zarzƒÖdzania systemem FoodSave AI
"""

import os
import sys
import json
import subprocess
import asyncio
import threading
import time
from pathlib import Path
from flask import Flask, request, jsonify, send_from_directory
from flask_cors import CORS
import psutil
import requests
import shlex

app = Flask(__name__)
CORS(app)

# Konfiguracja
SCRIPT_DIR = Path(__file__).parent.parent
FOODSAVE_SCRIPT = SCRIPT_DIR / "foodsave-all.sh"
BACKEND_PORT = 8000
FRONTEND_PORT = 3000
OLLAMA_PORT = 11434

class FoodSaveManager:
    def __init__(self):
        self.script_path = FOODSAVE_SCRIPT
        self.processes = {}
        
    def run_script_command(self, command, timeout=300):
        """Uruchamia komendƒô w skrypcie foodsave-all.sh"""
        try:
            # Przygotuj komendƒô echo do przekazania do skryptu
            full_command = f'echo "{command}" | {self.script_path}'
            
            result = subprocess.run(
                full_command,
                shell=True,
                capture_output=True,
                text=True,
                timeout=timeout,
                cwd=SCRIPT_DIR
            )
            
            return {
                'success': result.returncode == 0,
                'stdout': result.stdout,
                'stderr': result.stderr,
                'returncode': result.returncode
            }
        except subprocess.TimeoutExpired:
            return {
                'success': False,
                'stdout': '',
                'stderr': 'Timeout - operacja trwa≈Ça zbyt d≈Çugo',
                'returncode': -1
            }
        except Exception as e:
            return {
                'success': False,
                'stdout': '',
                'stderr': str(e),
                'returncode': -1
            }
    
    def check_port_status(self, port):
        """Sprawdza status portu"""
        try:
            # Sprawd≈∫ czy port jest u≈ºywany
            for conn in psutil.net_connections():
                if conn.laddr.port == port and conn.status == 'LISTEN':
                    return True
            return False
        except:
            return False
    
    def check_service_status(self, url, timeout=5):
        """Sprawdza status us≈Çugi HTTP"""
        try:
            response = requests.get(url, timeout=timeout)
            return response.status_code == 200
        except:
            return False
    
    def get_system_status(self):
        """Pobiera status wszystkich komponent√≥w systemu"""
        status = {
            'backend': {
                'port': BACKEND_PORT,
                'url': f'http://localhost:{BACKEND_PORT}/health',
                'running': False,
                'healthy': False
            },
            'frontend': {
                'port': FRONTEND_PORT,
                'url': f'http://localhost:{FRONTEND_PORT}',
                'running': False,
                'healthy': False
            },
            'database': {
                'port': 5432,
                'running': False
            },
            'ai': {
                'port': OLLAMA_PORT,
                'url': f'http://localhost:{OLLAMA_PORT}/api/tags',
                'running': False,
                'healthy': False
            }
        }
        
        # Sprawd≈∫ backend
        status['backend']['running'] = self.check_port_status(BACKEND_PORT)
        if status['backend']['running']:
            status['backend']['healthy'] = self.check_service_status(status['backend']['url'])
        
        # Sprawd≈∫ frontend
        status['frontend']['running'] = self.check_port_status(FRONTEND_PORT)
        if status['frontend']['running']:
            status['frontend']['healthy'] = self.check_service_status(status['frontend']['url'])
        
        # Sprawd≈∫ bazƒô danych
        status['database']['running'] = self.check_port_status(5432)
        
        # Sprawd≈∫ AI
        status['ai']['running'] = self.check_port_status(OLLAMA_PORT)
        if status['ai']['running']:
            status['ai']['healthy'] = self.check_service_status(status['ai']['url'])
        
        return status
    
    def get_logs(self, log_type='all'):
        """Pobiera logi systemowe"""
        try:
            log_files = {
                'backend': ['logs/backend.log', 'logs/backend.log.1', 'logs/backend.log.2'],
                'frontend': ['myappassistant-chat-frontend/frontend.log'],
                'docker': ['logs/docker.log'],
                'all': ['logs/backend.log', 'logs/backend.log.1', 'logs/backend.log.2', 
                       'myappassistant-chat-frontend/frontend.log', 'logs/docker.log']
            }
            
            logs = []
            files_to_check = log_files.get(log_type, log_files['all'])
            
            for log_file in files_to_check:
                log_path = SCRIPT_DIR / log_file
                if log_path.exists():
                    try:
                        with open(log_path, 'r', encoding='utf-8') as f:
                            content = f.read()
                            if content.strip():
                                logs.append(f"=== {log_file} ===\n{content}\n")
                    except Exception as e:
                        logs.append(f"=== {log_file} (b≈ÇƒÖd odczytu: {e}) ===\n")
            
            return '\n'.join(logs) if logs else 'Brak log√≥w do wy≈õwietlenia'
        except Exception as e:
            return f"B≈ÇƒÖd podczas pobierania log√≥w: {e}"
    
    def check_environment(self):
        """Sprawdza ≈õrodowisko systemu"""
        try:
            result = self.run_script_command('8')  # Opcja sprawdzania ≈õrodowiska
            
            # Je≈õli skrypt zwr√≥ci≈Ç b≈ÇƒÖd, dodaj dodatkowe informacje diagnostyczne
            if not result['success']:
                # Dodaj podstawowe sprawdzenia systemowe
                system_info = self._get_system_info()
                port_info = self._get_port_info()
                docker_info = self._get_docker_info()
                
                detailed_info = f"""
üîß DIAGNOSTYKA SYSTEMU FOODSAVE AI
{'='*50}

‚ùå B≈ÅƒÑD PODCZAS SPRAWDZANIA ≈öRODOWISKA
B≈ÇƒÖd: {result['stderr']}

üìã INFORMACJE SYSTEMOWE:
{system_info}

üåê SPRAWDZENIE PORT√ìW:
{port_info}

üê≥ INFORMACJE O DOCKER:
{docker_info}

üí° JAK NAPRAWIƒÜ PROBLEMY:

1. SPRAWD≈π CZY DOCKER JEST URUCHOMIONY:
   ‚Ä¢ Otw√≥rz terminal i wpisz: docker --version
   ‚Ä¢ Je≈õli nie dzia≈Ça: sudo systemctl start docker
   ‚Ä¢ Sprawd≈∫ czy u≈ºytkownik nale≈ºy do grupy docker

2. SPRAWD≈π CZY PORTY SƒÑ WOLNE:
   ‚Ä¢ Port 8000 (backend): {self.check_port_status(8000) and '‚ùå ZAJƒòTY' or '‚úÖ WOLNY'}
   ‚Ä¢ Port 3000 (frontend): {self.check_port_status(3000) and '‚ùå ZAJƒòTY' or '‚úÖ WOLNY'}
   ‚Ä¢ Port 5432 (baza danych): {self.check_port_status(5432) and '‚ùå ZAJƒòTY' or '‚úÖ WOLNY'}

3. SPRAWD≈π UPRAWNIENIA:
   ‚Ä¢ Upewnij siƒô, ≈ºe masz uprawnienia do uruchamiania Docker
   ‚Ä¢ Sprawd≈∫ czy katalog projektu ma uprawnienia do zapisu

4. RESTART SYSTEMU:
   ‚Ä¢ Czasami restart komputera rozwiƒÖzuje problemy z Docker
   ‚Ä¢ Uruchom ponownie po restarcie

üìû POTRZEBUJESZ POMOCY?
‚Ä¢ Sprawd≈∫ dokumentacjƒô: docs/README_DEVELOPMENT.md
‚Ä¢ Uruchom ponownie diagnostykƒô po naprawach
‚Ä¢ Skontaktuj siƒô z zespo≈Çem wsparcia
"""
                return detailed_info
            
            # Je≈õli skrypt dzia≈Ça≈Ç poprawnie, zwr√≥ƒá jego wynik
            return result['stdout']
            
        except Exception as e:
            # W przypadku b≈Çƒôdu, zwr√≥ƒá podstawowe informacje diagnostyczne
            system_info = self._get_system_info()
            port_info = self._get_port_info()
            docker_info = self._get_docker_info()
            
            return f"""
üîß DIAGNOSTYKA SYSTEMU FOODSAVE AI
{'='*50}

‚ùå B≈ÅƒÑD PODCZAS SPRAWDZANIA ≈öRODOWISKA
B≈ÇƒÖd: {str(e)}

üìã INFORMACJE SYSTEMOWE:
{system_info}

üåê SPRAWDZENIE PORT√ìW:
{port_info}

üê≥ INFORMACJE O DOCKER:
{docker_info}

üí° JAK NAPRAWIƒÜ PROBLEMY:

1. SPRAWD≈π CZY DOCKER JEST URUCHOMIONY:
   ‚Ä¢ Otw√≥rz terminal i wpisz: docker --version
   ‚Ä¢ Je≈õli nie dzia≈Ça: sudo systemctl start docker
   ‚Ä¢ Sprawd≈∫ czy u≈ºytkownik nale≈ºy do grupy docker

2. SPRAWD≈π CZY PORTY SƒÑ WOLNE:
   ‚Ä¢ Port 8000 (backend): {self.check_port_status(8000) and '‚ùå ZAJƒòTY' or '‚úÖ WOLNY'}
   ‚Ä¢ Port 3000 (frontend): {self.check_port_status(3000) and '‚ùå ZAJƒòTY' or '‚úÖ WOLNY'}
   ‚Ä¢ Port 5432 (baza danych): {self.check_port_status(5432) and '‚ùå ZAJƒòTY' or '‚úÖ WOLNY'}

3. SPRAWD≈π UPRAWNIENIA:
   ‚Ä¢ Upewnij siƒô, ≈ºe masz uprawnienia do uruchamiania Docker
   ‚Ä¢ Sprawd≈∫ czy katalog projektu ma uprawnienia do zapisu

4. RESTART SYSTEMU:
   ‚Ä¢ Czasami restart komputera rozwiƒÖzuje problemy z Docker
   ‚Ä¢ Uruchom ponownie po restarcie

üìû POTRZEBUJESZ POMOCY?
‚Ä¢ Sprawd≈∫ dokumentacjƒô: docs/README_DEVELOPMENT.md
‚Ä¢ Uruchom ponownie diagnostykƒô po naprawach
‚Ä¢ Skontaktuj siƒô z zespo≈Çem wsparcia
"""

    def _get_system_info(self):
        """Pobiera podstawowe informacje o systemie"""
        try:
            import platform
            import subprocess
            
            info = []
            info.append(f"‚Ä¢ System operacyjny: {platform.system()} {platform.release()}")
            info.append(f"‚Ä¢ Architektura: {platform.machine()}")
            info.append(f"‚Ä¢ Python: {platform.python_version()}")
            
            # Sprawd≈∫ Docker
            try:
                docker_version = subprocess.run(['docker', '--version'], 
                                              capture_output=True, text=True, timeout=5)
                if docker_version.returncode == 0:
                    info.append(f"‚Ä¢ Docker: {docker_version.stdout.strip()}")
                else:
                    info.append("‚Ä¢ Docker: ‚ùå Nie zainstalowany lub nie dzia≈Ça")
            except:
                info.append("‚Ä¢ Docker: ‚ùå Nie zainstalowany lub nie dzia≈Ça")
            
            # Sprawd≈∫ Node.js
            try:
                node_version = subprocess.run(['node', '--version'], 
                                            capture_output=True, text=True, timeout=5)
                if node_version.returncode == 0:
                    info.append(f"‚Ä¢ Node.js: {node_version.stdout.strip()}")
                else:
                    info.append("‚Ä¢ Node.js: ‚ùå Nie zainstalowany")
            except:
                info.append("‚Ä¢ Node.js: ‚ùå Nie zainstalowany")
            
            return '\n'.join(info)
        except Exception as e:
            return f"B≈ÇƒÖd podczas pobierania informacji systemowych: {e}"

    def _get_port_info(self):
        """Sprawdza status port√≥w"""
        info = []
        ports = [
            (8000, "Backend (API)"),
            (3000, "Frontend (Web)"),
            (5432, "Baza danych (PostgreSQL)"),
            (11434, "AI Model (Ollama)")
        ]
        
        for port, name in ports:
            if self.check_port_status(port):
                info.append(f"‚Ä¢ Port {port} ({name}): ‚ùå ZAJƒòTY")
            else:
                info.append(f"‚Ä¢ Port {port} ({name}): ‚úÖ WOLNY")
        
        return '\n'.join(info)

    def _get_docker_info(self):
        """Pobiera informacje o Docker"""
        try:
            import subprocess
            
            info = []
            
            # Sprawd≈∫ czy Docker jest zainstalowany
            try:
                docker_version = subprocess.run(['docker', '--version'], 
                                              capture_output=True, text=True, timeout=5)
                if docker_version.returncode == 0:
                    info.append(f"‚Ä¢ Docker zainstalowany: ‚úÖ {docker_version.stdout.strip()}")
                else:
                    info.append("‚Ä¢ Docker zainstalowany: ‚ùå NIE")
                    return '\n'.join(info)
            except:
                info.append("‚Ä¢ Docker zainstalowany: ‚ùå NIE")
                return '\n'.join(info)
            
            # Sprawd≈∫ czy Docker dzia≈Ça
            try:
                docker_info = subprocess.run(['docker', 'info'], 
                                           capture_output=True, text=True, timeout=5)
                if docker_info.returncode == 0:
                    info.append("‚Ä¢ Docker dzia≈Ça: ‚úÖ TAK")
                else:
                    info.append("‚Ä¢ Docker dzia≈Ça: ‚ùå NIE")
                    info.append("  ‚Üí Uruchom: sudo systemctl start docker")
                    return '\n'.join(info)
            except:
                info.append("‚Ä¢ Docker dzia≈Ça: ‚ùå NIE")
                info.append("  ‚Üí Uruchom: sudo systemctl start docker")
                return '\n'.join(info)
            
            # Sprawd≈∫ kontenery
            try:
                containers = subprocess.run(['docker', 'ps', '--format', 'table {{.Names}}\t{{.Status}}'], 
                                          capture_output=True, text=True, timeout=5)
                if containers.returncode == 0 and containers.stdout.strip():
                    info.append("‚Ä¢ Kontenery uruchomione: ‚úÖ TAK")
                    info.append("  ‚Üí Lista kontener√≥w:")
                    for line in containers.stdout.strip().split('\n')[1:]:  # Pomi≈Ñ nag≈Ç√≥wek
                        if line.strip():
                            info.append(f"    {line.strip()}")
                else:
                    info.append("‚Ä¢ Kontenery uruchomione: ‚ùå BRAK")
            except:
                info.append("‚Ä¢ Kontenery uruchomione: ‚ùå BRAK")
            
            return '\n'.join(info)
        except Exception as e:
            return f"B≈ÇƒÖd podczas sprawdzania Docker: {e}"
    
    def start_development_mode(self):
        """Uruchamia tryb deweloperski"""
        try:
            # Najpierw zatrzymaj wszystkie us≈Çugi
            self.stop_all_services()
            time.sleep(2)
            
            # Uruchom tryb deweloperski
            result = self.run_script_command('1', timeout=600)
            return result
        except Exception as e:
            return {
                'success': False,
                'stdout': '',
                'stderr': str(e),
                'returncode': -1
            }
    
    def start_production_mode(self):
        """Uruchamia tryb produkcyjny"""
        try:
            # Najpierw zatrzymaj wszystkie us≈Çugi
            self.stop_all_services()
            time.sleep(2)
            
            # Uruchom tryb produkcyjny
            result = self.run_script_command('2', timeout=600)
            return result
        except Exception as e:
            return {
                'success': False,
                'stdout': '',
                'stderr': str(e),
                'returncode': -1
            }
    
    def start_tauri_app(self):
        """Uruchamia aplikacjƒô Tauri"""
        try:
            result = self.run_script_command('3', timeout=300)
            return result
        except Exception as e:
            return {
                'success': False,
                'stdout': '',
                'stderr': str(e),
                'returncode': -1
            }
    
    def start_tauri_dev(self):
        """Uruchamia aplikacjƒô Tauri w trybie deweloperskim"""
        try:
            # Sprawd≈∫ czy katalog frontend istnieje
            frontend_dir = SCRIPT_DIR / 'myappassistant-chat-frontend'
            if not frontend_dir.exists():
                return {
                    'success': False,
                    'stdout': '',
                    'stderr': 'Katalog myappassistant-chat-frontend nie istnieje',
                    'returncode': -1
                }
            
            # Sprawd≈∫ czy package.json istnieje
            package_json = frontend_dir / 'package.json'
            if not package_json.exists():
                return {
                    'success': False,
                    'stdout': '',
                    'stderr': 'Plik package.json nie istnieje w katalogu frontend',
                    'returncode': -1
                }
            
            # Uruchom npm run tauri dev
            result = subprocess.run(
                ['npm', 'run', 'tauri', 'dev'],
                capture_output=True,
                text=True,
                timeout=300,
                cwd=frontend_dir
            )
            
            return {
                'success': result.returncode == 0,
                'stdout': result.stdout,
                'stderr': result.stderr,
                'returncode': result.returncode
            }
            
        except subprocess.TimeoutExpired:
            return {
                'success': False,
                'stdout': '',
                'stderr': 'Timeout - uruchamianie trwa≈Ço zbyt d≈Çugo',
                'returncode': -1
            }
        except FileNotFoundError:
            return {
                'success': False,
                'stdout': '',
                'stderr': 'npm nie jest zainstalowany lub nie jest dostƒôpny w PATH',
                'returncode': -1
            }
        except Exception as e:
            return {
                'success': False,
                'stdout': '',
                'stderr': str(e),
                'returncode': -1
            }
    
    def build_tauri_app(self):
        """Buduje aplikacjƒô Tauri"""
        try:
            result = self.run_script_command('4', timeout=900)  # 15 minut na budowanie
            return result
        except Exception as e:
            return {
                'success': False,
                'stdout': '',
                'stderr': str(e),
                'returncode': -1
            }
    
    def stop_all_services(self):
        """Zatrzymuje wszystkie us≈Çugi"""
        try:
            print("Zatrzymujƒô wszystkie us≈Çugi FoodSave AI...")
            
            # Sprawd≈∫ czy jeste≈õmy w katalogu z docker-compose
            docker_compose_files = ['docker-compose.yml', 'docker-compose.yaml']
            compose_file = None
            
            for file in docker_compose_files:
                if (SCRIPT_DIR / file).exists():
                    compose_file = file
                    break
            
            if compose_file:
                print(f"Znaleziono plik docker-compose: {compose_file}")
                
                # Zatrzymaj kontenery Docker
                try:
                    compose_result = subprocess.run(
                        ['docker', 'compose', '-f', compose_file, 'down'],
                        capture_output=True,
                        text=True,
                        timeout=60,
                        cwd=SCRIPT_DIR
                    )
                    
                    if compose_result.returncode == 0:
                        print("Kontenery Docker zosta≈Çy zatrzymane")
                        
                        # Zatrzymaj procesy frontendu
                        frontend_processes = []
                        
                        # Zatrzymaj procesy npm/next
                        for cmd in ['npm run dev', 'next dev', 'npx serve']:
                            try:
                                subprocess.run(['pkill', '-f', cmd], timeout=10)
                                frontend_processes.append(cmd)
                            except:
                                pass
                        
                        # Zatrzymaj aplikacjƒô Tauri
                        try:
                            subprocess.run(['pkill', '-f', 'FoodSave AI'], timeout=10)
                        except:
                            pass
                        
                        return {
                            'success': True,
                            'stdout': f"Us≈Çugi zosta≈Çy zatrzymane pomy≈õlnie.\nKontenery Docker: Zatrzymane\nProcesy frontendu: {len(frontend_processes)} zatrzymane",
                            'stderr': '',
                            'returncode': 0
                        }
                    else:
                        return {
                            'success': False,
                            'stdout': '',
                            'stderr': f"B≈ÇƒÖd zatrzymywania kontener√≥w Docker: {compose_result.stderr}",
                            'returncode': compose_result.returncode
                        }
                        
                except subprocess.TimeoutExpired:
                    return {
                        'success': False,
                        'stdout': '',
                        'stderr': 'Timeout podczas zatrzymywania kontener√≥w Docker',
                        'returncode': -1
                    }
                except FileNotFoundError:
                    return {
                        'success': False,
                        'stdout': '',
                        'stderr': 'Docker Compose nie jest zainstalowany lub nie jest dostƒôpny',
                        'returncode': -1
                    }
                except Exception as e:
                    return {
                        'success': False,
                        'stdout': '',
                        'stderr': f"B≈ÇƒÖd podczas zatrzymywania kontener√≥w: {str(e)}",
                        'returncode': -1
                    }
            else:
                print("Nie znaleziono pliku docker-compose, pr√≥bujƒô skrypt...")
                
                # Fallback do skryptu
                result = self.run_script_command('7', timeout=60)
                return result
                
        except Exception as e:
            return {
                'success': False,
                'stdout': '',
                'stderr': str(e),
                'returncode': -1
            }
    
    def get_backups(self):
        """Pobiera listƒô kopii zapasowych"""
        try:
            backup_dir = SCRIPT_DIR / 'backups'
            if not backup_dir.exists():
                return 'Brak katalogu kopii zapasowych'
            
            backups = []
            for item in backup_dir.iterdir():
                if item.is_dir():
                    backups.append(f"üìÅ {item.name}")
                else:
                    backups.append(f"üìÑ {item.name}")
            
            return '\n'.join(backups) if backups else 'Brak kopii zapasowych'
        except Exception as e:
            return f"B≈ÇƒÖd podczas pobierania kopii zapasowych: {e}"
    
    def create_backup(self):
        """Tworzy kopiƒô zapasowƒÖ"""
        try:
            # U≈ºyj skryptu backup_cli.py je≈õli istnieje
            backup_script = SCRIPT_DIR / 'scripts' / 'backup_cli.py'
            if backup_script.exists():
                result = subprocess.run(
                    [sys.executable, str(backup_script), '--create'],
                    capture_output=True,
                    text=True,
                    timeout=300,
                    cwd=SCRIPT_DIR
                )
                return {
                    'success': result.returncode == 0,
                    'stdout': result.stdout,
                    'stderr': result.stderr,
                    'location': 'backups/'
                }
            else:
                return {
                    'success': False,
                    'stdout': '',
                    'stderr': 'Skrypt backup_cli.py nie zosta≈Ç znaleziony',
                    'location': None
                }
        except Exception as e:
            return {
                'success': False,
                'stdout': '',
                'stderr': str(e),
                'location': None
            }

# Inicjalizacja managera
manager = FoodSaveManager()

# Routes
@app.route('/')
def index():
    """G≈Ç√≥wna strona GUI"""
    return send_from_directory('.', 'index.html')

@app.route('/<path:filename>')
def static_files(filename):
    """Serwuje pliki statyczne"""
    return send_from_directory('.', filename)

@app.route('/api/system/status')
def get_status():
    """Pobiera status systemu"""
    try:
        status = manager.get_system_status()
        return jsonify({
            'success': True,
            'status': status
        })
    except Exception as e:
        return jsonify({
            'success': False,
            'error': str(e)
        })

@app.route('/api/system/logs')
@app.route('/api/system/logs/<log_type>')
def get_logs(log_type='all'):
    """Pobiera logi systemowe"""
    try:
        logs = manager.get_logs(log_type)
        return jsonify({
            'success': True,
            'logs': logs
        })
    except Exception as e:
        return jsonify({
            'success': False,
            'error': str(e)
        })

@app.route('/api/system/check-environment')
def check_environment():
    """Sprawdza ≈õrodowisko systemu"""
    try:
        details = manager.check_environment()
        return jsonify({
            'success': True,
            'details': details
        })
    except Exception as e:
        return jsonify({
            'success': False,
            'error': str(e)
        })

@app.route('/api/system/start-dev', methods=['POST'])
def start_dev():
    """Uruchamia tryb deweloperski"""
    try:
        result = manager.start_development_mode()
        return jsonify({
            'success': result['success'],
            'message': result['stdout'] if result['success'] else result['stderr']
        })
    except Exception as e:
        return jsonify({
            'success': False,
            'error': str(e)
        })

@app.route('/api/system/start-prod', methods=['POST'])
def start_prod():
    """Uruchamia tryb produkcyjny"""
    try:
        result = manager.start_production_mode()
        return jsonify({
            'success': result['success'],
            'message': result['stdout'] if result['success'] else result['stderr']
        })
    except Exception as e:
        return jsonify({
            'success': False,
            'error': str(e)
        })

@app.route('/api/system/start-tauri', methods=['POST'])
def start_tauri():
    """Uruchamia aplikacjƒô Tauri"""
    try:
        result = manager.start_tauri_app()
        return jsonify({
            'success': result['success'],
            'message': 'Aplikacja Tauri uruchomiona pomy≈õlnie' if result['success'] else 'B≈ÇƒÖd uruchamiania aplikacji Tauri',
            'stdout': result['stdout'],
            'stderr': result['stderr'],
            'error': result['stderr'] if not result['success'] else None
        })
    except Exception as e:
        return jsonify({
            'success': False,
            'message': 'B≈ÇƒÖd serwera',
            'error': str(e)
        }), 500

@app.route('/api/system/start-tauri-dev', methods=['POST'])
def start_tauri_dev():
    """Uruchamia aplikacjƒô Tauri w trybie deweloperskim"""
    try:
        result = manager.start_tauri_dev()
        return jsonify({
            'success': result['success'],
            'message': 'Tryb deweloperski Tauri uruchomiony pomy≈õlnie' if result['success'] else 'B≈ÇƒÖd uruchamiania trybu deweloperskiego',
            'stdout': result['stdout'],
            'stderr': result['stderr'],
            'error': result['stderr'] if not result['success'] else None
        })
    except Exception as e:
        return jsonify({
            'success': False,
            'message': 'B≈ÇƒÖd serwera',
            'error': str(e)
        }), 500

@app.route('/api/system/build-tauri', methods=['POST'])
def build_tauri():
    """Buduje aplikacjƒô Tauri"""
    try:
        result = manager.build_tauri_app()
        return jsonify({
            'success': result['success'],
            'message': result['stdout'] if result['success'] else result['stderr'],
            'location': 'myappassistant-chat-frontend/src-tauri/target/release/bundle/appimage/'
        })
    except Exception as e:
        return jsonify({
            'success': False,
            'error': str(e)
        })

@app.route('/api/system/stop', methods=['POST'])
def stop_services():
    """Zatrzymuje wszystkie us≈Çugi"""
    try:
        result = manager.stop_all_services()
        return jsonify({
            'success': result['success'],
            'message': result['stdout'] if result['success'] else result['stderr']
        })
    except Exception as e:
        return jsonify({
            'success': False,
            'error': str(e)
        })

@app.route('/api/system/backups')
def get_backups():
    """Pobiera listƒô kopii zapasowych"""
    try:
        backups = manager.get_backups()
        return jsonify({
            'success': True,
            'backups': backups
        })
    except Exception as e:
        return jsonify({
            'success': False,
            'error': str(e)
        })

@app.route('/api/system/backup', methods=['POST'])
def create_backup():
    """Tworzy kopiƒô zapasowƒÖ"""
    try:
        result = manager.create_backup()
        return jsonify({
            'success': result['success'],
            'message': result['stdout'] if result['success'] else result['stderr'],
            'location': result['location']
        })
    except Exception as e:
        return jsonify({
            'success': False,
            'error': str(e)
        })

@app.route('/health')
def health_check():
    """Health check endpoint"""
    return jsonify({
        'status': 'healthy',
        'service': 'foodsave-gui',
        'timestamp': time.time()
    })

@app.route('/api/system/rebuild-containers', methods=['POST'])
def rebuild_containers():
    """Przebudowuje kontenery Docker (build + up -d)"""
    try:
        compose_file = None
        for fname in ['docker-compose.yml', 'docker-compose.yaml']:
            path = SCRIPT_DIR / fname
            if path.exists():
                compose_file = str(path)
                break
        if not compose_file:
            return jsonify({
                'success': False,
                'error': 'Nie znaleziono pliku docker-compose.yml ani docker-compose.yaml'
            })
        # Build
        build_cmd = f'docker compose -f {shlex.quote(compose_file)} build'
        build_proc = subprocess.run(build_cmd, shell=True, capture_output=True, text=True, cwd=SCRIPT_DIR, timeout=900)
        # Up
        up_cmd = f'docker compose -f {shlex.quote(compose_file)} up -d'
        up_proc = subprocess.run(up_cmd, shell=True, capture_output=True, text=True, cwd=SCRIPT_DIR, timeout=300)
        success = build_proc.returncode == 0 and up_proc.returncode == 0
        return jsonify({
            'success': success,
            'build_stdout': build_proc.stdout,
            'build_stderr': build_proc.stderr,
            'up_stdout': up_proc.stdout,
            'up_stderr': up_proc.stderr,
            'build_returncode': build_proc.returncode,
            'up_returncode': up_proc.returncode
        })
    except subprocess.TimeoutExpired:
        return jsonify({
            'success': False,
            'error': 'Operacja przekroczy≈Ça limit czasu (timeout)'
        })
    except Exception as e:
        return jsonify({
            'success': False,
            'error': str(e)
        })

if __name__ == '__main__':
    print("üçΩÔ∏è FoodSave AI GUI Server")
    print("=" * 40)
    print(f"Skrypt: {FOODSAVE_SCRIPT}")
    print(f"Katalog: {SCRIPT_DIR}")
    print("=" * 40)
    
    # Sprawd≈∫ czy skrypt istnieje
    if not FOODSAVE_SCRIPT.exists():
        print(f"‚ùå B≈ÇƒÖd: Skrypt {FOODSAVE_SCRIPT} nie istnieje!")
        sys.exit(1)
    
    # Sprawd≈∫ uprawnienia do skryptu
    if not os.access(FOODSAVE_SCRIPT, os.X_OK):
        print(f"‚ùå B≈ÇƒÖd: Brak uprawnie≈Ñ do wykonania {FOODSAVE_SCRIPT}")
        print("Uruchom: chmod +x foodsave-all.sh")
        sys.exit(1)
    
    print("‚úÖ Skrypt jest dostƒôpny i wykonalny")
    print("üöÄ Uruchamiam serwer GUI na porcie 8080...")
    print("üåê Otw√≥rz przeglƒÖdarkƒô: http://localhost:8080")
    print("=" * 40)
    
    app.run(host='0.0.0.0', port=8080, debug=False) 