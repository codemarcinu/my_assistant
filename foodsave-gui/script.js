// FoodSave AI GUI - JavaScript
class FoodSaveGUI {
    constructor() {
        this.baseUrl = 'http://localhost:8000';
        this.autoRefreshInterval = null;
        this.init();
    }

    init() {
        this.setupEventListeners();
        this.refreshStatus();
        this.startAutoRefresh();
    }

    setupEventListeners() {
        // Close modal when clicking outside
        document.getElementById('modal').addEventListener('click', (e) => {
            if (e.target.id === 'modal') {
                this.closeModal();
            }
        });

        // Close modal with Escape key
        document.addEventListener('keydown', (e) => {
            if (e.key === 'Escape') {
                this.closeModal();
            }
        });
    }

    // Status Management
    async refreshStatus() {
        try {
            await this.checkBackendStatus();
            await this.checkFrontendStatus();
            await this.checkDatabaseStatus();
            await this.checkAIStatus();
        } catch (error) {
            console.error('Error refreshing status:', error);
        }
    }

    async checkBackendStatus() {
        const statusCard = document.getElementById('backend-status');
        const statusText = statusCard.querySelector('.status-text');
        
        try {
            const response = await fetch(`${this.baseUrl}/health`, { 
                method: 'GET',
                timeout: 5000 
            });
            
            if (response.ok) {
                this.updateStatusCard(statusCard, 'online', 'Dzia≈Ça poprawnie');
            } else {
                this.updateStatusCard(statusCard, 'offline', 'B≈ÇƒÖd serwera');
            }
        } catch (error) {
            this.updateStatusCard(statusCard, 'offline', 'NieosiƒÖgalny');
        }
    }

    async checkFrontendStatus() {
        const statusCard = document.getElementById('frontend-status');
        const statusText = statusCard.querySelector('.status-text');
        
        try {
            const response = await fetch('http://localhost:3000', { 
                method: 'GET',
                timeout: 3000 
            });
            
            if (response.ok) {
                this.updateStatusCard(statusCard, 'online', 'Dzia≈Ça poprawnie');
            } else {
                this.updateStatusCard(statusCard, 'offline', 'B≈ÇƒÖd aplikacji');
            }
        } catch (error) {
            this.updateStatusCard(statusCard, 'offline', 'NieosiƒÖgalny');
        }
    }

    async checkDatabaseStatus() {
        const statusCard = document.getElementById('database-status');
        const statusText = statusCard.querySelector('.status-text');
        
        try {
            const response = await fetch(`${this.baseUrl}/health/database`, { 
                method: 'GET',
                timeout: 5000 
            });
            
            if (response.ok) {
                this.updateStatusCard(statusCard, 'online', 'Po≈ÇƒÖczony');
            } else {
                this.updateStatusCard(statusCard, 'offline', 'B≈ÇƒÖd po≈ÇƒÖczenia');
            }
        } catch (error) {
            this.updateStatusCard(statusCard, 'offline', 'NieosiƒÖgalny');
        }
    }

    async checkAIStatus() {
        const statusCard = document.getElementById('ai-status');
        const statusText = statusCard.querySelector('.status-text');
        
        try {
            const response = await fetch('http://localhost:11434/api/tags', { 
                method: 'GET',
                timeout: 3000 
            });
            
            if (response.ok) {
                this.updateStatusCard(statusCard, 'online', 'Model dostƒôpny');
            } else {
                this.updateStatusCard(statusCard, 'warning', 'Model niedostƒôpny');
            }
        } catch (error) {
            this.updateStatusCard(statusCard, 'warning', 'Ollama nie dzia≈Ça');
        }
    }

    updateStatusCard(card, status, text) {
        // Remove all status classes
        card.classList.remove('online', 'offline', 'warning');
        
        // Add new status class
        card.classList.add(status);
        
        // Update text
        const statusText = card.querySelector('.status-text');
        statusText.textContent = text;
    }

    startAutoRefresh() {
        // Refresh status every 30 seconds
        this.autoRefreshInterval = setInterval(() => {
            this.refreshStatus();
        }, 30000);
    }

    stopAutoRefresh() {
        if (this.autoRefreshInterval) {
            clearInterval(this.autoRefreshInterval);
            this.autoRefreshInterval = null;
        }
    }

    // Loading Management
    showLoading(text = 'Przetwarzam...', description = 'Proszƒô czekaƒá...') {
        document.getElementById('loadingText').textContent = text;
        document.getElementById('loadingDescription').textContent = description;
        document.getElementById('loadingOverlay').style.display = 'flex';
    }

    hideLoading() {
        document.getElementById('loadingOverlay').style.display = 'none';
    }

    // Modal Management
    showModal(title, content, footerButtons = []) {
        document.getElementById('modalTitle').textContent = title;
        document.getElementById('modalBody').innerHTML = content;
        
        const footer = document.getElementById('modalFooter');
        footer.innerHTML = '';
        
        if (footerButtons.length === 0) {
            footer.innerHTML = '<button class="btn btn-secondary" onclick="gui.closeModal()">Zamknij</button>';
        } else {
            footerButtons.forEach(button => {
                const btn = document.createElement('button');
                btn.className = `btn ${button.class || 'btn-secondary'}`;
                btn.textContent = button.text;
                btn.onclick = button.onclick;
                footer.appendChild(btn);
            });
        }
        
        document.getElementById('modal').style.display = 'flex';
    }

    closeModal() {
        document.getElementById('modal').style.display = 'none';
    }

    // System Actions
    async startDevelopmentMode() {
        this.showLoading('Uruchamiam tryb deweloperski...', 'To mo≈ºe potrwaƒá kilka minut');
        
        try {
            const response = await fetch('/api/system/start-dev', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' }
            });
            
            const result = await response.json();
            
            if (result.success) {
                this.showModal(
                    'Sukces!',
                    `
                    <div style="text-align: center; padding: 20px;">
                        <i class="fas fa-check-circle" style="font-size: 3rem; color: #10b981; margin-bottom: 20px;"></i>
                        <h3>Tryb deweloperski uruchomiony pomy≈õlnie!</h3>
                        <p>System jest gotowy do pracy.</p>
                        <div style="margin-top: 20px;">
                            <a href="http://localhost:3000" target="_blank" class="btn btn-primary">
                                <i class="fas fa-external-link-alt"></i>
                                Otw√≥rz aplikacjƒô
                            </a>
                        </div>
                    </div>
                    `,
                    [
                        {
                            text: 'Od≈õwie≈º status',
                            class: 'btn-primary',
                            onclick: () => {
                                this.closeModal();
                                this.refreshStatus();
                            }
                        },
                        {
                            text: 'Zamknij',
                            class: 'btn-secondary',
                            onclick: () => this.closeModal()
                        }
                    ]
                );
            } else {
                throw new Error(result.error || 'Nieznany b≈ÇƒÖd');
            }
        } catch (error) {
            this.showModal(
                '‚ùå B≈ÇƒÖd Uruchamiania Systemu',
                `
                <div style="text-align: center; padding: 20px;">
                    <i class="fas fa-exclamation-triangle" style="font-size: 3rem; color: #ef4444; margin-bottom: 20px;"></i>
                    <h3>Nie uda≈Ço siƒô uruchomiƒá systemu</h3>
                    <p style="color: #666; margin-bottom: 20px;">${error.message}</p>
                    
                    <div style="background: #f8f9fa; padding: 15px; border-radius: 8px; text-align: left; margin-top: 20px;">
                        <h4 style="margin: 0 0 10px 0; color: #2c3e50;">üîç Mo≈ºliwe przyczyny problemu:</h4>
                        <ul style="margin: 0; padding-left: 20px; color: #34495e;">
                            <li><strong>Porty zajƒôte:</strong> Port 3000 lub 8000 mo≈ºe byƒá u≈ºywany przez innƒÖ aplikacjƒô</li>
                            <li><strong>Docker nie dzia≈Ça:</strong> Docker mo≈ºe nie byƒá uruchomiony lub nie mieƒá uprawnie≈Ñ</li>
                            <li><strong>Brak uprawnie≈Ñ:</strong> U≈ºytkownik mo≈ºe nie mieƒá uprawnie≈Ñ do uruchamiania us≈Çug</li>
                            <li><strong>Problem z konfiguracjƒÖ:</strong> Pliki konfiguracyjne mogƒÖ byƒá uszkodzone</li>
                            <li><strong>Brak zale≈ºno≈õci:</strong> Niekt√≥re wymagane programy mogƒÖ nie byƒá zainstalowane</li>
                        </ul>
                    </div>
                    
                    <div style="background: #e8f4fd; padding: 15px; border-radius: 8px; margin-top: 15px;">
                        <h4 style="margin: 0 0 10px 0; color: #2980b9;">üîß Jak naprawiƒá problem:</h4>
                        <ol style="margin: 0; padding-left: 20px; color: #34495e;">
                            <li><strong>Sprawd≈∫ ≈õrodowisko:</strong> U≈ºyj opcji "Sprawd≈∫ ≈õrodowisko" aby zobaczyƒá szczeg√≥≈Çy</li>
                            <li><strong>Sprawd≈∫ Docker:</strong> Otw√≥rz terminal i wpisz <code>docker --version</code></li>
                            <li><strong>Sprawd≈∫ porty:</strong> Upewnij siƒô, ≈ºe porty 3000, 8000, 5432 sƒÖ wolne</li>
                            <li><strong>Sprawd≈∫ uprawnienia:</strong> Upewnij siƒô, ≈ºe masz dostƒôp do Docker</li>
                            <li><strong>Restart systemu:</strong> Czasami restart komputera rozwiƒÖzuje problemy</li>
                        </ol>
                    </div>
                    
                    <div style="background: #fff3cd; padding: 15px; border-radius: 8px; margin-top: 15px;">
                        <h4 style="margin: 0 0 10px 0; color: #856404;">üìû Potrzebujesz pomocy?</h4>
                        <p style="margin: 0; color: #856404;">
                            ‚Ä¢ Sprawd≈∫ dokumentacjƒô w katalogu <code>docs/</code><br>
                            ‚Ä¢ Uruchom diagnostykƒô ≈õrodowiska<br>
                            ‚Ä¢ Skontaktuj siƒô z zespo≈Çem wsparcia
                        </p>
                    </div>
                </div>
                `,
                [
                    {
                        text: 'üîß Sprawd≈∫ ≈õrodowisko',
                        class: 'btn-primary',
                        onclick: () => {
                            this.closeModal();
                            this.checkEnvironment();
                        }
                    },
                    {
                        text: 'üìä Od≈õwie≈º status',
                        class: 'btn-secondary',
                        onclick: () => {
                            this.closeModal();
                            this.refreshStatus();
                        }
                    },
                    {
                        text: '‚ùì Poka≈º pomoc',
                        class: 'btn-info',
                        onclick: () => {
                            this.closeModal();
                            this.showHelp();
                        }
                    },
                    {
                        text: 'Zamknij',
                        class: 'btn-secondary',
                        onclick: () => this.closeModal()
                    }
                ]
            );
        } finally {
            this.hideLoading();
        }
    }

    async startProductionMode() {
        this.showLoading('Uruchamiam tryb produkcyjny...', 'To mo≈ºe potrwaƒá kilka minut');
        
        try {
            const response = await fetch('/api/system/start-prod', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' }
            });
            
            const result = await response.json();
            
            if (result.success) {
                this.showModal(
                    'Sukces!',
                    `
                    <div style="text-align: center; padding: 20px;">
                        <i class="fas fa-check-circle" style="font-size: 3rem; color: #10b981; margin-bottom: 20px;"></i>
                        <h3>Tryb produkcyjny uruchomiony pomy≈õlnie!</h3>
                        <p>System jest gotowy do u≈ºytku produkcyjnego.</p>
                        <div style="margin-top: 20px;">
                            <a href="http://localhost:3000" target="_blank" class="btn btn-primary">
                                <i class="fas fa-external-link-alt"></i>
                                Otw√≥rz aplikacjƒô
                            </a>
                        </div>
                    </div>
                    `,
                    [
                        {
                            text: 'Od≈õwie≈º status',
                            class: 'btn-primary',
                            onclick: () => {
                                this.closeModal();
                                this.refreshStatus();
                            }
                        },
                        {
                            text: 'Zamknij',
                            class: 'btn-secondary',
                            onclick: () => this.closeModal()
                        }
                    ]
                );
            } else {
                throw new Error(result.error || 'Nieznany b≈ÇƒÖd');
            }
        } catch (error) {
            this.showModal(
                '‚ùå B≈ÇƒÖd Uruchamiania Systemu',
                `
                <div style="text-align: center; padding: 20px;">
                    <i class="fas fa-exclamation-triangle" style="font-size: 3rem; color: #ef4444; margin-bottom: 20px;"></i>
                    <h3>Nie uda≈Ço siƒô uruchomiƒá systemu</h3>
                    <p style="color: #666; margin-bottom: 20px;">${error.message}</p>
                    
                    <div style="background: #f8f9fa; padding: 15px; border-radius: 8px; text-align: left; margin-top: 20px;">
                        <h4 style="margin: 0 0 10px 0; color: #2c3e50;">üîç Mo≈ºliwe przyczyny problemu:</h4>
                        <ul style="margin: 0; padding-left: 20px; color: #34495e;">
                            <li><strong>Porty zajƒôte:</strong> Port 3000 lub 8000 mo≈ºe byƒá u≈ºywany przez innƒÖ aplikacjƒô</li>
                            <li><strong>Docker nie dzia≈Ça:</strong> Docker mo≈ºe nie byƒá uruchomiony lub nie mieƒá uprawnie≈Ñ</li>
                            <li><strong>Brak uprawnie≈Ñ:</strong> U≈ºytkownik mo≈ºe nie mieƒá uprawnie≈Ñ do uruchamiania us≈Çug</li>
                            <li><strong>Problem z konfiguracjƒÖ:</strong> Pliki konfiguracyjne mogƒÖ byƒá uszkodzone</li>
                            <li><strong>Brak zale≈ºno≈õci:</strong> Niekt√≥re wymagane programy mogƒÖ nie byƒá zainstalowane</li>
                        </ul>
                    </div>
                    
                    <div style="background: #e8f4fd; padding: 15px; border-radius: 8px; margin-top: 15px;">
                        <h4 style="margin: 0 0 10px 0; color: #2980b9;">üîß Jak naprawiƒá problem:</h4>
                        <ol style="margin: 0; padding-left: 20px; color: #34495e;">
                            <li><strong>Sprawd≈∫ ≈õrodowisko:</strong> U≈ºyj opcji "Sprawd≈∫ ≈õrodowisko" aby zobaczyƒá szczeg√≥≈Çy</li>
                            <li><strong>Sprawd≈∫ Docker:</strong> Otw√≥rz terminal i wpisz <code>docker --version</code></li>
                            <li><strong>Sprawd≈∫ porty:</strong> Upewnij siƒô, ≈ºe porty 3000, 8000, 5432 sƒÖ wolne</li>
                            <li><strong>Sprawd≈∫ uprawnienia:</strong> Upewnij siƒô, ≈ºe masz dostƒôp do Docker</li>
                            <li><strong>Restart systemu:</strong> Czasami restart komputera rozwiƒÖzuje problemy</li>
                        </ol>
                    </div>
                    
                    <div style="background: #fff3cd; padding: 15px; border-radius: 8px; margin-top: 15px;">
                        <h4 style="margin: 0 0 10px 0; color: #856404;">üìû Potrzebujesz pomocy?</h4>
                        <p style="margin: 0; color: #856404;">
                            ‚Ä¢ Sprawd≈∫ dokumentacjƒô w katalogu <code>docs/</code><br>
                            ‚Ä¢ Uruchom diagnostykƒô ≈õrodowiska<br>
                            ‚Ä¢ Skontaktuj siƒô z zespo≈Çem wsparcia
                        </p>
                    </div>
                </div>
                `,
                [
                    {
                        text: 'üîß Sprawd≈∫ ≈õrodowisko',
                        class: 'btn-primary',
                        onclick: () => {
                            this.closeModal();
                            this.checkEnvironment();
                        }
                    },
                    {
                        text: 'üìä Od≈õwie≈º status',
                        class: 'btn-secondary',
                        onclick: () => {
                            this.closeModal();
                            this.refreshStatus();
                        }
                    },
                    {
                        text: '‚ùì Poka≈º pomoc',
                        class: 'btn-info',
                        onclick: () => {
                            this.closeModal();
                            this.showHelp();
                        }
                    },
                    {
                        text: 'Zamknij',
                        class: 'btn-secondary',
                        onclick: () => this.closeModal()
                    }
                ]
            );
        } finally {
            this.hideLoading();
        }
    }

    async startTauriApp() {
        this.showLoading('Uruchamiam aplikacjƒô desktop...', 'Sprawdzam czy aplikacja jest zbudowana');
        
        try {
            const response = await fetch('/api/system/start-tauri', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' }
            });
            
            const result = await response.json();
            
            if (result.success) {
                this.showModal(
                    'Sukces!',
                    `
                    <div style="text-align: center; padding: 20px;">
                        <i class="fas fa-check-circle" style="font-size: 3rem; color: #10b981; margin-bottom: 20px;"></i>
                        <h3>Aplikacja desktop uruchomiona!</h3>
                        <p>Aplikacja powinna siƒô otworzyƒá w osobnym oknie.</p>
                    </div>
                    `,
                    [
                        {
                            text: 'Zamknij',
                            class: 'btn-secondary',
                            onclick: () => this.closeModal()
                        }
                    ]
                );
            } else {
                throw new Error(result.error || 'Nieznany b≈ÇƒÖd');
            }
        } catch (error) {
            this.showModal(
                'B≈ÇƒÖd',
                `
                <div style="text-align: center; padding: 20px;">
                    <i class="fas fa-exclamation-triangle" style="font-size: 3rem; color: #ef4444; margin-bottom: 20px;"></i>
                    <h3>Nie uda≈Ço siƒô uruchomiƒá aplikacji</h3>
                    <p>${error.message}</p>
                    <div style="margin-top: 20px;">
                        <p>Aplikacja mo≈ºe nie byƒá jeszcze zbudowana.</p>
                    </div>
                </div>
                `,
                [
                    {
                        text: 'Zbuduj aplikacjƒô',
                        class: 'btn-primary',
                        onclick: () => {
                            this.closeModal();
                            this.buildTauriApp();
                        }
                    },
                    {
                        text: 'Zamknij',
                        class: 'btn-secondary',
                        onclick: () => this.closeModal()
                    }
                ]
            );
        } finally {
            this.hideLoading();
        }
    }

    async startTauriDev() {
        this.showLoading('Uruchamiam tryb deweloperski Tauri...', 'To mo≈ºe potrwaƒá kilka minut');
        
        try {
            const response = await fetch('/api/system/start-tauri-dev', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' }
            });
            
            const result = await response.json();
            
            if (result.success) {
                this.showModal(
                    'Sukces!',
                    `
                    <div style="text-align: center; padding: 20px;">
                        <i class="fas fa-check-circle" style="font-size: 3rem; color: #10b981; margin-bottom: 20px;"></i>
                        <h3>Tryb deweloperski Tauri uruchomiony!</h3>
                        <p>Aplikacja dzia≈Ça w trybie deweloperskim z hot-reload.</p>
                        <div style="background: #e8f4fd; padding: 15px; border-radius: 8px; margin-top: 15px;">
                            <h4 style="margin: 0 0 10px 0; color: #2980b9;">üí° Co to oznacza:</h4>
                            <ul style="margin: 0; padding-left: 20px; color: #34495e; font-size: 14px;">
                                <li><strong>Hot Reload:</strong> Zmiany w kodzie automatycznie od≈õwie≈ºajƒÖ aplikacjƒô</li>
                                <li><strong>Debug Mode:</strong> Pe≈Çne logi i informacje debugowania</li>
                                <li><strong>Dev Tools:</strong> Dostƒôp do narzƒôdzi deweloperskich</li>
                                <li><strong>Live Updates:</strong> Natychmiastowe odzwierciedlenie zmian</li>
                            </ul>
                        </div>
                    </div>
                    `,
                    [
                        {
                            text: 'Poka≈º logi',
                            class: 'btn-primary',
                            onclick: () => {
                                this.closeModal();
                                this.showLogs();
                            }
                        },
                        {
                            text: 'Zamknij',
                            class: 'btn-secondary',
                            onclick: () => this.closeModal()
                        }
                    ]
                );
            } else {
                throw new Error(result.error || 'Nieznany b≈ÇƒÖd');
            }
        } catch (error) {
            this.showModal(
                'B≈ÇƒÖd',
                `
                <div style="text-align: center; padding: 20px;">
                    <i class="fas fa-exclamation-triangle" style="font-size: 3rem; color: #ef4444; margin-bottom: 20px;"></i>
                    <h3>Nie uda≈Ço siƒô uruchomiƒá trybu deweloperskiego</h3>
                    <p>${error.message}</p>
                    <div style="background: #fff3cd; padding: 15px; border-radius: 8px; margin-top: 15px;">
                        <h4 style="margin: 0 0 10px 0; color: #856404;">üîß Mo≈ºliwe rozwiƒÖzania:</h4>
                        <ul style="margin: 0; padding-left: 20px; color: #856404; font-size: 14px;">
                            <li>Sprawd≈∫ czy Node.js i npm sƒÖ zainstalowane</li>
                            <li>Sprawd≈∫ czy katalog myappassistant-chat-frontend istnieje</li>
                            <li>Sprawd≈∫ czy package.json zawiera skrypt "tauri dev"</li>
                            <li>Sprawd≈∫ logi systemowe</li>
                        </ul>
                    </div>
                </div>
                `,
                [
                    {
                        text: 'Sprawd≈∫ ≈õrodowisko',
                        class: 'btn-primary',
                        onclick: () => {
                            this.closeModal();
                            this.checkEnvironment();
                        }
                    },
                    {
                        text: 'Poka≈º logi',
                        class: 'btn-secondary',
                        onclick: () => {
                            this.closeModal();
                            this.showLogs();
                        }
                    },
                    {
                        text: 'Zamknij',
                        class: 'btn-secondary',
                        onclick: () => this.closeModal()
                    }
                ]
            );
        } finally {
            this.hideLoading();
        }
    }

    async stopAllServices() {
        this.showModal(
            'Potwierdzenie',
            `
            <div style="text-align: center; padding: 20px;">
                <i class="fas fa-question-circle" style="font-size: 3rem; color: #f59e0b; margin-bottom: 20px;"></i>
                <h3>Czy na pewno chcesz zatrzymaƒá wszystkie us≈Çugi?</h3>
                <p>To bezpiecznie zatrzyma ca≈Çy system FoodSave AI.</p>
            </div>
            `,
            [
                {
                    text: 'Tak, zatrzymaj',
                    class: 'btn-primary',
                    onclick: async () => {
                        this.closeModal();
                        this.showLoading('Zatrzymujƒô us≈Çugi...', 'To mo≈ºe potrwaƒá kilka sekund');
                        
                        try {
                            const response = await fetch('/api/system/stop', {
                                method: 'POST',
                                headers: { 'Content-Type': 'application/json' }
                            });
                            
                            const result = await response.json();
                            
                            if (result.success) {
                                this.showModal(
                                    'Sukces!',
                                    `
                                    <div style="text-align: center; padding: 20px;">
                                        <i class="fas fa-check-circle" style="font-size: 3rem; color: #10b981; margin-bottom: 20px;"></i>
                                        <h3>Wszystkie us≈Çugi zosta≈Çy zatrzymane</h3>
                                        <p>System jest bezpiecznie wy≈ÇƒÖczony.</p>
                                    </div>
                                    `,
                                    [
                                        {
                                            text: 'Od≈õwie≈º status',
                                            class: 'btn-primary',
                                            onclick: () => {
                                                this.closeModal();
                                                this.refreshStatus();
                                            }
                                        },
                                        {
                                            text: 'Zamknij',
                                            class: 'btn-secondary',
                                            onclick: () => this.closeModal()
                                        }
                                    ]
                                );
                            } else {
                                throw new Error(result.error || 'Nieznany b≈ÇƒÖd');
                            }
                        } catch (error) {
                            this.showModal(
                                'B≈ÇƒÖd',
                                `
                                <div style="text-align: center; padding: 20px;">
                                    <i class="fas fa-exclamation-triangle" style="font-size: 3rem; color: #ef4444; margin-bottom: 20px;"></i>
                                    <h3>Nie uda≈Ço siƒô zatrzymaƒá us≈Çug</h3>
                                    <p>${error.message}</p>
                                </div>
                                `,
                                [
                                    {
                                        text: 'Zamknij',
                                        class: 'btn-secondary',
                                        onclick: () => this.closeModal()
                                    }
                                ]
                            );
                        } finally {
                            this.hideLoading();
                        }
                    }
                },
                {
                    text: 'Anuluj',
                    class: 'btn-secondary',
                    onclick: () => this.closeModal()
                }
            ]
        );
    }

    async showLogs() {
        this.showLoading('≈Åadujƒô logi...', 'Pobieram najnowsze logi systemowe');
        
        try {
            const response = await fetch('/api/system/logs', {
                method: 'GET',
                headers: { 'Content-Type': 'application/json' }
            });
            
            const result = await response.json();
            
            if (result.success) {
                this.showModal(
                    'üìù Logi Systemowe',
                    `
                    <div style="background: #f8f9fa; padding: 15px; border-radius: 8px; margin-bottom: 20px;">
                        <h4 style="margin: 0 0 10px 0; color: #2c3e50;">üí° Jak czytaƒá logi:</h4>
                        <ul style="margin: 0; padding-left: 20px; color: #34495e; font-size: 14px;">
                            <li><strong>ERROR</strong> - B≈ÇƒÖd wymagajƒÖcy naprawy</li>
                            <li><strong>WARN</strong> - Ostrze≈ºenie, ale system mo≈ºe dzia≈Çaƒá</li>
                            <li><strong>INFO</strong> - Informacja o normalnym dzia≈Çaniu</li>
                            <li><strong>DEBUG</strong> - Szczeg√≥≈Çowe informacje dla programist√≥w</li>
                        </ul>
                    </div>
                    
                    <div style="margin-bottom: 20px;">
                        <div style="display: flex; gap: 10px; margin-bottom: 15px; flex-wrap: wrap;">
                            <button class="btn btn-secondary" onclick="gui.showLogsByType('backend')">üîß Backend</button>
                            <button class="btn btn-secondary" onclick="gui.showLogsByType('frontend')">üåê Frontend</button>
                            <button class="btn btn-secondary" onclick="gui.showLogsByType('docker')">üê≥ Docker</button>
                            <button class="btn btn-primary" onclick="gui.showLogsByType('all')">üìã Wszystkie</button>
                        </div>
                    </div>
                    
                    <div style="background: #2c3e50; color: #ecf0f1; padding: 15px; border-radius: 8px; font-family: 'Courier New', monospace; font-size: 12px; line-height: 1.4; max-height: 400px; overflow-y: auto;">
                        <div style="white-space: pre-wrap;">${result.logs || 'Brak log√≥w do wy≈õwietlenia'}</div>
                    </div>
                    
                    <div style="background: #e8f4fd; padding: 15px; border-radius: 8px; margin-top: 15px;">
                        <h4 style="margin: 0 0 10px 0; color: #2980b9;">üîç Co szukaƒá w logach:</h4>
                        <ul style="margin: 0; padding-left: 20px; color: #34495e; font-size: 14px;">
                            <li><strong>B≈Çƒôdy po≈ÇƒÖczenia:</strong> "Connection refused", "Timeout"</li>
                            <li><strong>B≈Çƒôdy uprawnie≈Ñ:</strong> "Permission denied", "Access denied"</li>
                            <li><strong>B≈Çƒôdy port√≥w:</strong> "Address already in use", "Port busy"</li>
                            <li><strong>B≈Çƒôdy bazy danych:</strong> "Database connection failed"</li>
                        </ul>
                    </div>
                    `,
                    [
                        {
                            text: 'üîÑ Od≈õwie≈º logi',
                            class: 'btn-primary',
                            onclick: () => {
                                this.closeModal();
                                this.showLogs();
                            }
                        },
                        {
                            text: 'üîß Sprawd≈∫ ≈õrodowisko',
                            class: 'btn-secondary',
                            onclick: () => {
                                this.closeModal();
                                this.checkEnvironment();
                            }
                        },
                        {
                            text: '‚ùì Poka≈º pomoc',
                            class: 'btn-info',
                            onclick: () => {
                                this.closeModal();
                                this.showHelp();
                            }
                        },
                        {
                            text: 'üîÑ Przebuduj kontenery',
                            class: 'btn-warning',
                            onclick: () => {
                                this.closeModal();
                                this.rebuildContainers();
                            }
                        },
                        {
                            text: 'Zamknij',
                            class: 'btn-secondary',
                            onclick: () => this.closeModal()
                        }
                    ]
                );
            } else {
                throw new Error(result.error || 'Nieznany b≈ÇƒÖd');
            }
        } catch (error) {
            this.showModal(
                '‚ùå B≈ÇƒÖd ≈Åadowania Log√≥w',
                `
                <div style="text-align: center; padding: 20px;">
                    <i class="fas fa-exclamation-triangle" style="font-size: 3rem; color: #ef4444; margin-bottom: 20px;"></i>
                    <h3>Nie uda≈Ço siƒô za≈Çadowaƒá log√≥w</h3>
                    <p style="color: #666; margin-bottom: 20px;">${error.message}</p>
                    
                    <div style="background: #f8f9fa; padding: 15px; border-radius: 8px; text-align: left; margin-top: 20px;">
                        <h4 style="margin: 0 0 10px 0; color: #2c3e50;">üîç Mo≈ºliwe przyczyny:</h4>
                        <ul style="margin: 0; padding-left: 20px; color: #34495e;">
                            <li><strong>System nie jest uruchomiony:</strong> Logi sƒÖ dostƒôpne tylko gdy system dzia≈Ça</li>
                            <li><strong>Brak uprawnie≈Ñ:</strong> GUI mo≈ºe nie mieƒá dostƒôpu do plik√≥w log√≥w</li>
                            <li><strong>Pliki log√≥w nie istniejƒÖ:</strong> System mo≈ºe nie tworzyƒá log√≥w</li>
                            <li><strong>Problem z serwerem GUI:</strong> Serwer GUI mo≈ºe nie dzia≈Çaƒá poprawnie</li>
                        </ul>
                    </div>
                    
                    <div style="background: #e8f4fd; padding: 15px; border-radius: 8px; margin-top: 15px;">
                        <h4 style="margin: 0 0 10px 0; color: #2980b9;">üîß Co mo≈ºesz zrobiƒá:</h4>
                        <ol style="margin: 0; padding-left: 20px; color: #34495e;">
                            <li><strong>Sprawd≈∫ czy system dzia≈Ça:</strong> U≈ºyj opcji "Sprawd≈∫ status systemu"</li>
                            <li><strong>Uruchom system:</strong> Je≈õli nie dzia≈Ça, uruchom go najpierw</li>
                            <li><strong>Sprawd≈∫ uprawnienia:</strong> Upewnij siƒô, ≈ºe GUI ma dostƒôp do plik√≥w</li>
                            <li><strong>Restart GUI:</strong> Uruchom ponownie GUI</li>
                        </ol>
                    </div>
                </div>
                `,
                [
                    {
                        text: 'üìä Sprawd≈∫ status',
                        class: 'btn-primary',
                        onclick: () => {
                            this.closeModal();
                            this.refreshStatus();
                        }
                    },
                    {
                        text: 'üîß Sprawd≈∫ ≈õrodowisko',
                        class: 'btn-secondary',
                        onclick: () => {
                            this.closeModal();
                            this.checkEnvironment();
                        }
                    },
                    {
                        text: 'üîÑ Przebuduj kontenery',
                        class: 'btn-warning',
                        onclick: () => {
                            this.closeModal();
                            this.rebuildContainers();
                        }
                    },
                    {
                        text: 'Zamknij',
                        class: 'btn-secondary',
                        onclick: () => this.closeModal()
                    }
                ]
            );
        } finally {
            this.hideLoading();
        }
    }

    async showLogsByType(type) {
        this.showLoading('≈Åadujƒô logi...', `Pobieram logi typu: ${type}`);
        
        try {
            const response = await fetch(`/api/system/logs/${type}`, {
                method: 'GET',
                headers: { 'Content-Type': 'application/json' }
            });
            
            const result = await response.json();
            
            if (result.success) {
                const modalBody = document.getElementById('modalBody');
                modalBody.innerHTML = `
                    <div style="margin-bottom: 20px;">
                        <div style="display: flex; gap: 10px; margin-bottom: 15px;">
                            <button class="btn btn-secondary" onclick="gui.showLogsByType('backend')">Backend</button>
                            <button class="btn btn-secondary" onclick="gui.showLogsByType('frontend')">Frontend</button>
                            <button class="btn btn-secondary" onclick="gui.showLogsByType('docker')">Docker</button>
                            <button class="btn btn-secondary" onclick="gui.showLogsByType('all')">Wszystkie</button>
                        </div>
                    </div>
                    <div class="logs-container">
${result.logs || 'Brak log√≥w do wy≈õwietlenia'}
                    </div>
                `;
            } else {
                throw new Error(result.error || 'Nieznany b≈ÇƒÖd');
            }
        } catch (error) {
            this.showModal(
                'B≈ÇƒÖd',
                `
                <div style="text-align: center; padding: 20px;">
                    <i class="fas fa-exclamation-triangle" style="font-size: 3rem; color: #ef4444; margin-bottom: 20px;"></i>
                    <h3>Nie uda≈Ço siƒô za≈Çadowaƒá log√≥w</h3>
                    <p>${error.message}</p>
                </div>
                `,
                [
                    {
                        text: 'Zamknij',
                        class: 'btn-secondary',
                        onclick: () => this.closeModal()
                    }
                ]
            );
        } finally {
            this.hideLoading();
        }
    }

    async checkEnvironment() {
        this.showLoading('Sprawdzam ≈õrodowisko...', 'Diagnostyka systemu w toku');
        
        try {
            const response = await fetch('/api/system/check-environment', {
                method: 'GET',
                headers: { 'Content-Type': 'application/json' }
            });
            
            const result = await response.json();
            
            if (result.success) {
                // Formatuj szczeg√≥≈Çowe informacje diagnostyczne
                const formattedDetails = this._formatDiagnosticInfo(result.details);
                
                this.showModal(
                    'üîß Diagnostyka ≈örodowiska Systemu',
                    `
                    <div style="max-height: 500px; overflow-y: auto; font-family: 'Courier New', monospace; font-size: 12px; line-height: 1.4;">
                        <div style="background: #f8f9fa; padding: 15px; border-radius: 8px; margin-bottom: 15px;">
                            <h3 style="margin: 0 0 10px 0; color: #2c3e50;">üìã Wynik Diagnostyki</h3>
                            <div style="white-space: pre-wrap; color: #34495e;">${formattedDetails}</div>
                        </div>
                        
                        <div style="background: #e8f4fd; padding: 15px; border-radius: 8px; margin-bottom: 15px;">
                            <h3 style="margin: 0 0 10px 0; color: #2980b9;">üí° Co to oznacza?</h3>
                            <ul style="margin: 0; padding-left: 20px; color: #34495e;">
                                <li><strong>‚úÖ</strong> - Wszystko dzia≈Ça poprawnie</li>
                                <li><strong>‚ùå</strong> - Znaleziono problem do naprawienia</li>
                                <li><strong>‚ö†Ô∏è</strong> - Ostrze≈ºenie, ale system mo≈ºe dzia≈Çaƒá</li>
                            </ul>
                        </div>
                        
                        <div style="background: #fff3cd; padding: 15px; border-radius: 8px;">
                            <h3 style="margin: 0 0 10px 0; color: #856404;">üöÄ Nastƒôpne kroki</h3>
                            <ol style="margin: 0; padding-left: 20px; color: #856404;">
                                <li>Sprawd≈∫ czy wszystkie komponenty majƒÖ status ‚úÖ</li>
                                <li>Je≈õli widzisz ‚ùå, napraw problemy przed uruchomieniem</li>
                                <li>Uruchom ponownie diagnostykƒô po naprawach</li>
                                <li>Gdy wszystko jest ‚úÖ, mo≈ºesz uruchomiƒá system</li>
                            </ol>
                        </div>
                    </div>
                    `,
                    [
                        {
                            text: 'üîÑ Uruchom ponownie diagnostykƒô',
                            class: 'btn-primary',
                            onclick: () => {
                                this.closeModal();
                                this.checkEnvironment();
                            }
                        },
                        {
                            text: 'üìä Od≈õwie≈º status systemu',
                            class: 'btn-secondary',
                            onclick: () => {
                                this.closeModal();
                                this.refreshStatus();
                            }
                        },
                        {
                            text: '‚ùì Poka≈º pomoc',
                            class: 'btn-info',
                            onclick: () => {
                                this.closeModal();
                                this.showHelp();
                            }
                        },
                        {
                            text: 'üîÑ Przebuduj kontenery',
                            class: 'btn-warning',
                            onclick: () => {
                                this.closeModal();
                                this.rebuildContainers();
                            }
                        },
                        {
                            text: 'Zamknij',
                            class: 'btn-secondary',
                            onclick: () => this.closeModal()
                        }
                    ]
                );
            } else {
                throw new Error(result.error || 'Nieznany b≈ÇƒÖd');
            }
        } catch (error) {
            this.showModal(
                '‚ùå B≈ÇƒÖd Diagnostyki',
                `
                <div style="text-align: center; padding: 20px;">
                    <i class="fas fa-exclamation-triangle" style="font-size: 3rem; color: #ef4444; margin-bottom: 20px;"></i>
                    <h3>Nie uda≈Ço siƒô sprawdziƒá ≈õrodowiska</h3>
                    <p style="color: #666; margin-bottom: 20px;">${error.message}</p>
                    
                    <div style="background: #f8f9fa; padding: 15px; border-radius: 8px; text-align: left; margin-top: 20px;">
                        <h4 style="margin: 0 0 10px 0; color: #2c3e50;">üîß Co mo≈ºesz zrobiƒá:</h4>
                        <ol style="margin: 0; padding-left: 20px; color: #34495e;">
                            <li><strong>Sprawd≈∫ czy GUI dzia≈Ça:</strong> Uruchom ponownie GUI</li>
                            <li><strong>Sprawd≈∫ uprawnienia:</strong> Upewnij siƒô, ≈ºe masz dostƒôp do systemu</li>
                            <li><strong>Sprawd≈∫ Docker:</strong> Uruchom <code>docker --version</code> w terminalu</li>
                            <li><strong>Sprawd≈∫ porty:</strong> Upewnij siƒô, ≈ºe porty 8000, 3000, 5432 sƒÖ wolne</li>
                            <li><strong>Restart systemu:</strong> Czasami restart komputera pomaga</li>
                        </ol>
                    </div>
                    
                    <div style="background: #e8f4fd; padding: 15px; border-radius: 8px; margin-top: 15px;">
                        <h4 style="margin: 0 0 10px 0; color: #2980b9;">üìû Potrzebujesz pomocy?</h4>
                        <p style="margin: 0; color: #34495e;">
                            ‚Ä¢ Sprawd≈∫ dokumentacjƒô w katalogu <code>docs/</code><br>
                            ‚Ä¢ Uruchom ponownie diagnostykƒô po naprawach<br>
                            ‚Ä¢ Skontaktuj siƒô z zespo≈Çem wsparcia
                        </p>
                    </div>
                </div>
                `,
                [
                    {
                        text: 'üîÑ Spr√≥buj ponownie',
                        class: 'btn-primary',
                        onclick: () => {
                            this.closeModal();
                            this.checkEnvironment();
                        }
                    },
                    {
                        text: '‚ùì Poka≈º pomoc',
                        class: 'btn-info',
                        onclick: () => {
                            this.closeModal();
                            this.showHelp();
                        }
                    },
                    {
                        text: 'üîÑ Przebuduj kontenery',
                        class: 'btn-warning',
                        onclick: () => {
                            this.closeModal();
                            this.rebuildContainers();
                        }
                    },
                    {
                        text: 'Zamknij',
                        class: 'btn-secondary',
                        onclick: () => this.closeModal()
                    }
                ]
            );
        } finally {
            this.hideLoading();
        }
    }

    _formatDiagnosticInfo(details) {
        if (!details) {
            return 'Brak szczeg√≥≈Ç√≥w diagnostyki';
        }
        
        // Je≈õli szczeg√≥≈Çy zawierajƒÖ ju≈º sformatowany tekst, zwr√≥ƒá go
        if (details.includes('üîß DIAGNOSTYKA SYSTEMU') || details.includes('‚ùå B≈ÅƒÑD')) {
            return details;
        }
        
        // W przeciwnym razie sformatuj jako zwyk≈Çy tekst
        return details.replace(/\n/g, '<br>');
    }

    async buildTauriApp() {
        this.showModal(
            'Potwierdzenie',
            `
            <div style="text-align: center; padding: 20px;">
                <i class="fas fa-question-circle" style="font-size: 3rem; color: #f59e0b; margin-bottom: 20px;"></i>
                <h3>Czy chcesz zbudowaƒá aplikacjƒô desktop?</h3>
                <p>To mo≈ºe potrwaƒá kilka minut i wymaga zainstalowanego Rust.</p>
            </div>
            `,
            [
                {
                    text: 'Tak, zbuduj',
                    class: 'btn-primary',
                    onclick: async () => {
                        this.closeModal();
                        this.showLoading('Budujƒô aplikacjƒô...', 'To mo≈ºe potrwaƒá kilka minut');
                        
                        try {
                            const response = await fetch('/api/system/build-tauri', {
                                method: 'POST',
                                headers: { 'Content-Type': 'application/json' }
                            });
                            
                            const result = await response.json();
                            
                            if (result.success) {
                                this.showModal(
                                    'Sukces!',
                                    `
                                    <div style="text-align: center; padding: 20px;">
                                        <i class="fas fa-check-circle" style="font-size: 3rem; color: #10b981; margin-bottom: 20px;"></i>
                                        <h3>Aplikacja zosta≈Ça zbudowana!</h3>
                                        <p>Plik instalacyjny jest gotowy.</p>
                                        <div style="margin-top: 20px;">
                                            <p><strong>Lokalizacja:</strong> ${result.location || 'Nieznana'}</p>
                                        </div>
                                    </div>
                                    `,
                                    [
                                        {
                                            text: 'Uruchom aplikacjƒô',
                                            class: 'btn-primary',
                                            onclick: () => {
                                                this.closeModal();
                                                this.startTauriApp();
                                            }
                                        },
                                        {
                                            text: 'Zamknij',
                                            class: 'btn-secondary',
                                            onclick: () => this.closeModal()
                                        }
                                    ]
                                );
                            } else {
                                throw new Error(result.error || 'Nieznany b≈ÇƒÖd');
                            }
                        } catch (error) {
                            this.showModal(
                                'B≈ÇƒÖd',
                                `
                                <div style="text-align: center; padding: 20px;">
                                    <i class="fas fa-exclamation-triangle" style="font-size: 3rem; color: #ef4444; margin-bottom: 20px;"></i>
                                    <h3>Nie uda≈Ço siƒô zbudowaƒá aplikacji</h3>
                                    <p>${error.message}</p>
                                    <div style="margin-top: 20px; text-align: left;">
                                        <h4>Mo≈ºliwe przyczyny:</h4>
                                        <ul>
                                            <li>Rust nie jest zainstalowany</li>
                                            <li>Brak uprawnie≈Ñ do budowania</li>
                                            <li>Problem z zale≈ºno≈õciami</li>
                                            <li>B≈ÇƒÖd w konfiguracji</li>
                                        </ul>
                                    </div>
                                </div>
                                `,
                                [
                                    {
                                        text: 'Zamknij',
                                        class: 'btn-secondary',
                                        onclick: () => this.closeModal()
                                    }
                                ]
                            );
                        } finally {
                            this.hideLoading();
                        }
                    }
                },
                {
                    text: 'Anuluj',
                    class: 'btn-secondary',
                    onclick: () => this.closeModal()
                }
            ]
        );
    }

    async showBackups() {
        this.showLoading('≈Åadujƒô kopie zapasowe...', 'Sprawdzam dostƒôpne backupy');
        
        try {
            const response = await fetch('/api/system/backups', {
                method: 'GET',
                headers: { 'Content-Type': 'application/json' }
            });
            
            const result = await response.json();
            
            if (result.success) {
                this.showModal(
                    'Kopie Zapasowe',
                    `
                    <div style="max-height: 400px; overflow-y: auto;">
                        ${result.backups || 'Brak kopii zapasowych'}
                    </div>
                    `,
                    [
                        {
                            text: 'Utw√≥rz backup',
                            class: 'btn-primary',
                            onclick: () => {
                                this.closeModal();
                                this.createBackup();
                            }
                        },
                        {
                            text: 'Zamknij',
                            class: 'btn-secondary',
                            onclick: () => this.closeModal()
                        }
                    ]
                );
            } else {
                throw new Error(result.error || 'Nieznany b≈ÇƒÖd');
            }
        } catch (error) {
            this.showModal(
                'B≈ÇƒÖd',
                `
                <div style="text-align: center; padding: 20px;">
                    <i class="fas fa-exclamation-triangle" style="font-size: 3rem; color: #ef4444; margin-bottom: 20px;"></i>
                    <h3>Nie uda≈Ço siƒô za≈Çadowaƒá kopii zapasowych</h3>
                    <p>${error.message}</p>
                </div>
                `,
                [
                    {
                        text: 'Zamknij',
                        class: 'btn-secondary',
                        onclick: () => this.closeModal()
                    }
                ]
            );
        } finally {
            this.hideLoading();
        }
    }

    async createBackup() {
        this.showLoading('Tworzƒô kopiƒô zapasowƒÖ...', 'To mo≈ºe potrwaƒá kilka minut');
        
        try {
            const response = await fetch('/api/system/backup', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' }
            });
            
            const result = await response.json();
            
            if (result.success) {
                this.showModal(
                    'Sukces!',
                    `
                    <div style="text-align: center; padding: 20px;">
                        <i class="fas fa-check-circle" style="font-size: 3rem; color: #10b981; margin-bottom: 20px;"></i>
                        <h3>Kopia zapasowa zosta≈Ça utworzona!</h3>
                        <p>Backup zosta≈Ç zapisany pomy≈õlnie.</p>
                        <div style="margin-top: 20px;">
                            <p><strong>Lokalizacja:</strong> ${result.location || 'Nieznana'}</p>
                        </div>
                    </div>
                    `,
                    [
                        {
                            text: 'Zobacz backupy',
                            class: 'btn-primary',
                            onclick: () => {
                                this.closeModal();
                                this.showBackups();
                            }
                        },
                        {
                            text: 'Zamknij',
                            class: 'btn-secondary',
                            onclick: () => this.closeModal()
                        }
                    ]
                );
            } else {
                throw new Error(result.error || 'Nieznany b≈ÇƒÖd');
            }
        } catch (error) {
            this.showModal(
                'B≈ÇƒÖd',
                `
                <div style="text-align: center; padding: 20px;">
                    <i class="fas fa-exclamation-triangle" style="font-size: 3rem; color: #ef4444; margin-bottom: 20px;"></i>
                    <h3>Nie uda≈Ço siƒô utworzyƒá kopii zapasowej</h3>
                    <p>${error.message}</p>
                </div>
                `,
                [
                    {
                        text: 'Zamknij',
                        class: 'btn-secondary',
                        onclick: () => this.closeModal()
                    }
                ]
            );
        } finally {
            this.hideLoading();
        }
    }

    showHelp() {
        this.showModal(
            'Pomoc i Informacje',
            `
            <div style="max-height: 400px; overflow-y: auto;">
                <h3>üçΩÔ∏è FoodSave AI - Panel Sterowania</h3>
                <p>Intuicyjny panel do zarzƒÖdzania systemem FoodSave AI.</p>
                
                <h4>üöÄ Szybkie Akcje:</h4>
                <ul>
                    <li><strong>Tryb Deweloperski:</strong> Dla programist√≥w i testowania</li>
                    <li><strong>Tryb Produkcyjny:</strong> Dla u≈ºytkownik√≥w ko≈Ñcowych</li>
                    <li><strong>Aplikacja Desktop:</strong> Natywna aplikacja systemowa</li>
                    <li><strong>Zatrzymaj Wszystko:</strong> Bezpieczne wy≈ÇƒÖczenie</li>
                </ul>
                
                <h4>üîß Opcje Zaawansowane:</h4>
                <ul>
                    <li><strong>Poka≈º Logi:</strong> Dostƒôp do log√≥w systemowych</li>
                    <li><strong>Sprawd≈∫ ≈örodowisko:</strong> Diagnostyka systemu</li>
                    <li><strong>Zbuduj Aplikacjƒô:</strong> Tworzenie pliku instalacyjnego</li>
                    <li><strong>Kopie Zapasowe:</strong> ZarzƒÖdzanie backupami</li>
                </ul>
                
                <h4>üìä Status Systemu:</h4>
                <ul>
                    <li><strong>Zielony:</strong> Dzia≈Ça poprawnie</li>
                    <li><strong>Czerwony:</strong> B≈ÇƒÖd lub nieosiƒÖgalny</li>
                    <li><strong>≈ª√≥≈Çty:</strong> Ostrze≈ºenie</li>
                </ul>
                
                <h4>üîó Przydatne Linki:</h4>
                <ul>
                    <li><strong>Interfejs Web:</strong> http://localhost:3000</li>
                    <li><strong>Dokumentacja API:</strong> http://localhost:8000/docs</li>
                    <li><strong>Backend API:</strong> http://localhost:8000</li>
                </ul>
                
                <h4>‚ùì RozwiƒÖzywanie Problem√≥w:</h4>
                <ul>
                    <li>Sprawd≈∫ czy Docker jest uruchomiony</li>
                    <li>Upewnij siƒô, ≈ºe porty 3000 i 8000 sƒÖ wolne</li>
                    <li>Sprawd≈∫ logi w przypadku b≈Çƒôd√≥w</li>
                    <li>U≈ºyj opcji "Sprawd≈∫ ≈õrodowisko"</li>
                </ul>
                <div style="margin-top: 16px; padding: 10px; background: #fef3c7; border-radius: 8px; border: 1px solid #fde68a;">
                  <b>Najczƒôstsze problemy i rozwiƒÖzania:</b>
                  <ul style="margin-top: 8px;">
                    <li><b>Backend nie uruchamia siƒô lub pojawia siƒô "Nie uda≈Ço siƒô uruchomiƒá systemu":</b>
                      <ul>
                        <li>Sprawd≈∫ logi backendu:<br><code>docker logs aiasisstmarubo-backend-1 --tail 50</code></li>
                        <li>Je≈õli widzisz <b>ImportError</b> lub b≈ÇƒÖd importu, sprawd≈∫ czy wszystkie pliki i funkcje istniejƒÖ w kodzie ≈∫r√≥d≈Çowym.</li>
                        <li>Po poprawce kodu backendu uruchom:<br><code>docker-compose build backend</code><br><code>docker-compose up -d</code></li>
                      </ul>
                    </li>
                    <li><b>Baza danych nie startuje lub port 5432 jest zajƒôty:</b>
                      <ul>
                        <li>Sprawd≈∫ czy lokalny PostgreSQL nie blokuje portu:<br><code>sudo netstat -tulpn | grep :5432</code></li>
                        <li>Je≈õli tak, zatrzymaj lokalny serwer:<br><code>sudo systemctl stop postgresql</code></li>
                      </ul>
                    </li>
                    <li><b>Jak sprawdziƒá status us≈Çug Docker:</b>
                      <ul>
                        <li>Wy≈õwietl listƒô uruchomionych kontener√≥w:<br><code>docker ps</code></li>
                        <li>Sprawd≈∫ logi wybranej us≈Çugi, np. bazy danych:<br><code>docker logs aiasisstmarubo-postgres-1 --tail 50</code></li>
                      </ul>
                    </li>
                    <li><b>Backend nie odpowiada na healthcheck:</b>
                      <ul>
                        <li>Sprawd≈∫ status:<br><code>curl -s http://localhost:8000/health</code></li>
                        <li>Je≈õli brak odpowiedzi, sprawd≈∫ logi backendu jak wy≈ºej.</li>
                      </ul>
                    </li>
                    <li><b>Najczƒôstsze przyczyny problem√≥w:</b>
                      <ul>
                        <li>B≈ÇƒÖd w kodzie backendu (np. ImportError)</li>
                        <li>Brak uprawnie≈Ñ do Docker</li>
                        <li>Porty zajƒôte przez inne procesy</li>
                        <li>Nieaktualny obraz backendu (po zmianach w kodzie zawsze wykonaj <code>docker-compose build backend</code>)</li>
                      </ul>
                    </li>
                  </ul>
                  <div style="margin-top: 8px; font-size: 0.95em; color: #b91c1c;">
                    Je≈õli nie wiesz jak naprawiƒá b≈ÇƒÖd, skopiuj logi i skontaktuj siƒô z administratorem lub zespo≈Çem wsparcia.
                  </div>
                </div>
            </div>
            `,
            [
                {
                    text: 'Zamknij',
                    class: 'btn-secondary',
                    onclick: () => this.closeModal()
                }
            ]
        );
    }

    async rebuildContainers() {
        this.showLoading('Przebudowujƒô kontenery...', 'To mo≈ºe potrwaƒá kilka minut');
        
        try {
            const response = await fetch('/api/system/rebuild-containers', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' }
            });
            
            const result = await response.json();
            
            if (result.success) {
                this.showModal(
                    'Sukces!',
                    `
                    <div style="text-align: center; padding: 20px;">
                        <i class="fas fa-check-circle" style="font-size: 3rem; color: #10b981; margin-bottom: 20px;"></i>
                        <h3>Kontenery zosta≈Çy przebudowane!</h3>
                        <p>System jest gotowy do pracy.</p>
                    </div>
                    `,
                    [
                        {
                            text: 'Od≈õwie≈º status',
                            class: 'btn-primary',
                            onclick: () => {
                                this.closeModal();
                                this.refreshStatus();
                            }
                        },
                        {
                            text: 'Zamknij',
                            class: 'btn-secondary',
                            onclick: () => this.closeModal()
                        }
                    ]
                );
            } else {
                throw new Error(result.error || 'Nieznany b≈ÇƒÖd');
            }
        } catch (error) {
            this.showModal(
                '‚ùå B≈ÇƒÖd Przebudowy Kontener√≥w',
                `
                <div style="text-align: center; padding: 20px;">
                    <i class="fas fa-exclamation-triangle" style="font-size: 3rem; color: #ef4444; margin-bottom: 20px;"></i>
                    <h3>Nie uda≈Ço siƒô przebudowaƒá kontener√≥w</h3>
                    <p style="color: #666; margin-bottom: 20px;">${error.message}</p>
                    
                    <div style="background: #f8f9fa; padding: 15px; border-radius: 8px; text-align: left; margin-top: 20px;">
                        <h4 style="margin: 0 0 10px 0; color: #2c3e50;">üîç Mo≈ºliwe przyczyny:</h4>
                        <ul style="margin: 0; padding-left: 20px; color: #34495e;">
                            <li><strong>System nie jest uruchomiony:</strong> Kontenery sƒÖ dostƒôpne tylko gdy system dzia≈Ça</li>
                            <li><strong>Brak uprawnie≈Ñ:</strong> GUI mo≈ºe nie mieƒá dostƒôpu do kontener√≥w</li>
                            <li><strong>Pliki konfiguracyjne mogƒÖ byƒá uszkodzone:</strong> Kontenery mogƒÖ nie dzia≈Çaƒá poprawnie</li>
                            <li><strong>Problem z serwerem GUI:</strong> Serwer GUI mo≈ºe nie dzia≈Çaƒá poprawnie</li>
                        </ul>
                    </div>
                    
                    <div style="background: #e8f4fd; padding: 15px; border-radius: 8px; margin-top: 15px;">
                        <h4 style="margin: 0 0 10px 0; color: #2980b9;">üîß Co mo≈ºesz zrobiƒá:</h4>
                        <ol style="margin: 0; padding-left: 20px; color: #34495e;">
                            <li><strong>Sprawd≈∫ czy system dzia≈Ça:</strong> U≈ºyj opcji "Sprawd≈∫ status systemu"</li>
                            <li><strong>Uruchom system:</strong> Je≈õli nie dzia≈Ça, uruchom go najpierw</li>
                            <li><strong>Sprawd≈∫ uprawnienia:</strong> Upewnij siƒô, ≈ºe GUI ma dostƒôp do kontener√≥w</li>
                            <li><strong>Restart GUI:</strong> Uruchom ponownie GUI</li>
                        </ol>
                    </div>
                </div>
                `,
                [
                    {
                        text: 'üìä Sprawd≈∫ status',
                        class: 'btn-primary',
                        onclick: () => {
                            this.closeModal();
                            this.refreshStatus();
                        }
                    },
                    {
                        text: 'üîß Sprawd≈∫ ≈õrodowisko',
                        class: 'btn-secondary',
                        onclick: () => {
                            this.closeModal();
                            this.checkEnvironment();
                        }
                    },
                    {
                        text: 'Zamknij',
                        class: 'btn-secondary',
                        onclick: () => this.closeModal()
                    }
                ]
            );
        } finally {
            this.hideLoading();
        }
    }
}

// Global functions for onclick handlers
let gui;

// Initialize GUI when page loads
document.addEventListener('DOMContentLoaded', () => {
    gui = new FoodSaveGUI();
});

// Global functions for HTML onclick handlers
function refreshStatus() {
    if (gui) gui.refreshStatus();
}

function startDevelopmentMode() {
    if (gui) gui.startDevelopmentMode();
}

function startProductionMode() {
    if (gui) gui.startProductionMode();
}

function startTauriApp() {
    gui.startTauriApp();
}

function startTauriDev() {
    gui.startTauriDev();
}

function stopAllServices() {
    if (gui) gui.stopAllServices();
}

function showLogs() {
    if (gui) gui.showLogs();
}

function checkEnvironment() {
    if (gui) gui.checkEnvironment();
}

function buildTauriApp() {
    if (gui) gui.buildTauriApp();
}

function showBackups() {
    if (gui) gui.showBackups();
}

function showHelp() {
    if (gui) gui.showHelp();
}

function closeModal() {
    if (gui) gui.closeModal();
} 
