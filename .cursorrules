# .cursorrules for FoodSave AI Project

## VERSION
- Version: 2.0
- Last Updated: 2024-12-21

## GENERAL PRINCIPLES
- Prioritize clarity, understanding, and learning.
- Maintain regular communication in human-readable format.
- Focus on AI capabilities and business logic, not deep technical internals.

## USER PROFILE
- Non-technical AI project owner
- Interested in AI-assisted features, not implementation details
- Needs educational explanations and clear reasoning

## AI COMMUNICATION PROTOCOL
- Always explain the **why** behind changes
- Avoid unnecessary technical jargon
- Always provide:
  - Context for each change
  - Warning of possible side effects
  - Simple verification checklist
  - Reversion instructions

## SAFE DEVELOPMENT HIERARCHY

### SAFE (Immediate Approval)
- Add new features (without modifying existing ones)
- Bug fixes in isolated components
- Documentation updates
- Adding unit tests

### CAUTION (Needs Discussion)
- Modifying existing functions
- Changing DB structure
- Dependency updates
- System config updates

### RISKY (Needs Backup + Plan)
- Architecture refactoring
- Data migration
- Core logic changes
- Auth system modifications

## AI RESPONSE FORMAT
1. **Summary**: What is to be done and why
2. **Justification**: Business or functional rationale
3. **Implementation**: Clear step-by-step (with explanations)
4. **Verification**: How to know it worked
5. **Troubleshooting**: What to do if something goes wrong

## TECHNICAL STYLE GUIDE

### Python Backend
- Focus on readability > performance (unless critical)
- Add comments explaining business logic
- Use descriptive variable/function names
- Implement useful logging

```python
# ✅ GOOD - With business context
def calculate_food_waste_score(user_habits: Dict) -> float:
    """
    Calculates user's food waste score.
    Higher score = more waste.

    Args:
        user_habits: Dict with keys like frequency of shopping, food disposal amount

    Returns:
        A float from 0.0 (no waste) to 10.0 (extreme waste)
    """
    # Calculation logic here...
```

### Next.js Frontend
- Use functional components
- Add comment headers with purpose and user impact
- Implement friendly error handling
- Use TypeScript

### State Management
- Document app state with user-facing context
- Explain data flow clearly
- Implement intuitive loading states

## AI AGENT DEVELOPMENT
1. Define clear **purpose** of each AI agent
2. Set **boundaries** (what it should and shouldn’t do)
3. Implement fallback for failure scenarios
4. Add user feedback mechanism

## AI QUALITY CONTROL
- Use confidence scoring
- Add "Report incorrect answer" option
- Regularly review/improve prompts
- Monitor live AI accuracy and helpfulness

## SECURITY & PRIVACY
- Explain every security mechanism in plain terms
- Implement privacy features transparently
- Document user data handling clearly
- Review permissions regularly

## MONITORING
- Instrument backend with Prometheus + Grafana
- Track both technical and UX metrics
  - e.g. response times, error rates, AI usefulness
- Use `/health` endpoints

## EDUCATIONAL PRINCIPLES
- Define new tech terms the first time
- Use real-world analogies when possible
- Provide docs/links for further reading
- Include practical examples

## CONTINUOUS INTEGRATION RULES
- Every code change must:
  - Be committed with descriptive message
  - Be pushed to remote regularly
  - Pass basic lint/test (if relevant)
- Optional: Create a daily `cron` job or pre-push Git hook to automate:
  ```bash
  git add . && git commit -m "auto: sync changes" && git push
  ```

## ISSUE HANDLING TEMPLATE
```
PROBLEM: [Short summary of what’s broken]
CONTEXT: [Why this matters to users or app goals]
POSSIBLE CAUSES:
1. [Cause 1 explanation]
2. [Cause 2 explanation]

DIAGNOSTICS TO TRY:
1. [Step 1]
2. [Step 2]

WHAT I NEED FROM YOU:
- [What user needs to provide]

WHERE TO LOOK FOR HELP:
- [Links/docs/search terms]
```

## FINAL NOTE
These `.cursorrules` guide AI to assist in a user-friendly, educational, and safe way, enabling meaningful app development even without deep coding experience.

> AI is your co-pilot, not just your coder.
> Build smart. Build with care. Build together.
