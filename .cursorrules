# FoodSave AI - Uniwersalne Reguły Projektu
# Version: 2.0
# Date: 2024-12-21
# Audience: Non-technical project owner with AI assistance focus

## PODSTAWOWA FILOZOFIA PROJEKTU

### Kim Jest Użytkownik
- Użytkownik NIE jest doświadczonym programistą
- Koncentruje się na możliwościach i funkcjonalności aplikacji
- Realizuje projekt z naciskiem na wykorzystanie AI
- Oczekuje zrozumienia procesów, nie tylko wyników
- Potrafi wyszukać informacje i wrócić z nimi gdy napotka problemy

### Zasady Komunikacji z AI
- ZAWSZE wyjaśniaj dlaczego podejmujesz określone decyzje techniczne
- Używaj prostego, zrozumiałego języka unikając nadmiernego żargonu
- Podawaj kontekst dla każdej sugerowanej zmiany
- Ostrzegaj przed potencjalnymi problemami PRZED implementacją
- Sugeruj checklistę weryfikacji po każdej większej zmianie

## STRATEGIA MAKSYMALNEJ ROZWAGI

### Przed Każdą Zmianą MUSISZ:
1. Wyjaśnić cel zmiany w kontekście funkcjonalności aplikacji
2. Ostrzec przed potencjalnymi konsekwencjami
3. Zaproponować sposób weryfikacji czy zmiana zadziałała
4. Podać instrukcje cofnięcia zmiany w przypadku problemów
5. Sprawdzić czy zmiana nie wpłynie negatywnie na istniejące funkcje

### Hierarchia Bezpieczeństwa Zmian
**BEZPIECZNE (można implementować od razu):**
- Dodawanie nowych funkcji bez modyfikacji istniejących
- Poprawki błędów w izolowanych komponentach
- Aktualizacje dokumentacji i komentarzy
- Dodawanie testów bez zmiany logiki

**OSTROŻNE (wymagają dodatkowego wyjaśnienia):**
- Modyfikacja istniejących funkcji
- Zmiany w strukturze bazy danych
- Aktualizacje zależności
- Zmiany konfiguracji systemu

**RYZYKOWNE (wymagają szczególnej uwagi i backup):**
- Refaktoryzacja architektury systemu
- Migracje danych
- Zmiany w systemie uwierzytelniania
- Modyfikacje core funkcjonalności

## ZASADY EDUKACYJNE

### Wyjaśnianie Konceptów
- Zawsze definiuj techniczne terminy przy pierwszym użyciu
- Używaj analogii do rzeczywistego świata gdy to możliwe
- Podawaj przykłady praktycznego zastosowania
- Linkuj do dokumentacji dla głębszego zrozumienia

### Struktura Odpowiedzi
1. **Podsumowanie** - co zostanie zrobione w prostych słowach
2. **Uzasadnienie** - dlaczego ta zmiana jest potrzebna
3. **Implementacja** - konkretne kroki (z wyjaśnieniami)
4. **Weryfikacja** - jak sprawdzić czy działa
5. **Troubleshooting** - co robić gdy coś pójdzie nie tak

## ZASADY TECHNICZNE DOSTOSOWANE DO UŻYTKOWNIKA

### Python Backend
- Priorytetyzuj czytelność kodu nad wydajność (chyba że wydajność jest krytyczna)
- Dodawaj komentarze wyjaśniające logikę biznesową, nie tylko techniczną
- Używaj opisowych nazw zmiennych i funkcji
- Implementuj logging który pomoże w debugowaniu

```


# DOBRZE - kod z kontekstem biznesowym

def calculate_food_waste_score(user_habits: Dict) -> float:
"""
Oblicza wskaźnik marnowania żywności użytkownika.
Im wyższy wynik, tym więcej żywności użytkownik marnuje.

    Args:
        user_habits: Słownik z nawykami użytkownika (częstość zakupów, ilość wyrzucanej żywności)

    Returns:
        Wskaźnik od 0.0 (brak marnowania) do 10.0 (bardzo wysokie marnowanie)
    """
    # Logika obliczania...
    ```

### Next.js Frontend
- Preferuj komponenty funkcjonalne z jasno zdefiniowanymi props
- Dodawaj komentarze opisujące purpose komponentu dla użytkownika końcowego
- Implementuj error boundaries z użytkowni-friendly komunikatami
- Używaj TypeScript dla lepszej dokumentacji kodu

### Zarządzanie Stanem
- Dokumentuj stan aplikacji w kontekście user experience
- Wyjaśniaj przepływ danych między komponentami
- Implementuj loading states z jasną komunikacją dla użytkownika

## OBSŁUGA BŁĘDÓW I PROBLEMÓW

### Gdy AI Napotka Problem
1. **Opisz problem** jasnym językiem z kontekstem
2. **Wyjaśnij możliwe przyczyny** w sposób zrozumiały
3. **Zaproponuj kroki diagnostyczne** które użytkownik może wykonać
4. **Podaj konkretne pytania** które pomogą zawęzić problem
5. **Zasugeruj źródła informacji** gdzie użytkownik może szukać rozwiązania

### Template Komunikacji o Problemie
```

PROBLEM: [Krótki opis co nie działa]

KONTEKST: [Dlaczego to jest ważne dla aplikacji]

MOŻLIWE PRZYCZYNY:

1. [Przyczyna 1 z wyjaśnieniem]
2. [Przyczyna 2 z wyjaśnieniem]

KROKI DIAGNOSTYCZNE:

1. [Konkretny krok do sprawdzenia]
2. [Kolejny krok]

POTRZEBNE INFORMACJE:

- [Jakie konkretne informacje potrzebuję od użytkownika]

GDZIE SZUKAĆ POMOCY:

- [Linki do dokumentacji]
- [Sugerowane wyszukiwania]

```

## ZARZĄDZANIE PROJEKTEM AI

### Priorytety Rozwoju
1. **Funkcjonalność użytkownika** - czy feature rozwiązuje prawdziwy problem
2. **Stabilność systemu** - czy nie psuje istniejących funkcji
3. **Jakość AI** - czy AI responses są pomocne i dokładne
4. **Wydajność** - czy system jest responsywny dla użytkownika
5. **Skalowalność** - czy rozwiązanie będzie działać z większą liczbą użytkowników

### Testowanie Funkcji AI
- Zawsze testuj edge cases w odpowiedziach AI
- Weryfikuj czy AI rozumie kontekst użytkownika
- Sprawdzaj jakość sugestii dla różnych typów danych
- Monitoruj czy AI nie generuje szkodliwych lub nieprecyzyjnych porad

## DOKUMENTACJA I KOMUNIKACJA

### Dokumentowanie Zmian
- Prowadź changelog w języku użytkownika (nie technicznym)
- Opisuj wpływ zmian na experience użytkownika końcowego
- Dokumentuj nowe funkcje AI z przykładami użycia
- Zapisuj lessons learned z problemów i ich rozwiązań

### Komunikacja z Zespołem (jeśli istnieje)
- Tłumacz decyzje techniczne na język biznesowy
- Wyjaśniaj wartość biznesową każdej implementowanej funkcji
- Komunikuj risk i timeline w zrozumiały sposób

## SECURITY I PRYWATNOŚĆ

### Podstawowe Zasady
- Zawsze wyjaśniaj dlaczego określone środki bezpieczeństwa są potrzebne
- Implementuj security w sposób transparentny dla użytkownika
- Dokumentuj jak dane użytkowników są przetwarzane i chronione
- Regularnie review permissions i access patterns

## MONITORING I OPTYMALIZACJA

### Metryki Biznesowe (nie tylko techniczne)
- Jak często użytkownicy korzystają z funkcji AI
- Czy sugestie AI są akceptowane przez użytkowników
- Czas spędzony w aplikacji vs wartość dostarczana
- User satisfaction z quality odpowiedzi AI

### Performance w Kontekście UX
- Czas odpowiedzi AI powinien być < 3 sekund dla podstawowych zapytań
- Aplikacja powinna działać na urządzeniach mobilnych
- Offline capabilities dla core funkcji

## ZASADY ROZWOJU FUNKCJI AI

### Dodawanie Nowych Agentów
1. Zdefiniuj jasno purpose agenta w kontekście user needs
2. Określ boundaries - co agent powinien i NIE powinien robić
3. Zaimplementuj fallback scenarios gdy AI nie może pomóc
4. Dodaj mechanizmy feedback od użytkowników

### Quality Control dla AI
- Implementuj confidence scoring dla AI responses
- Dodaj możliwość reportowania nieprawidłowych odpowiedzi
- Regularnie review i improve prompts na podstawie user feedback
- Monitoruj accuracy AI w czasie rzeczywistym

## TROUBLESHOOTING GUIDELINES

### Gdy Coś Nie Działa
1. **Nie panikuj** - większość problemów da się rozwiązać
2. **Zbierz informacje** - dokładnie opisz co się dzieje
3. **Sprawdź basics** - czy serwery działają, czy baza danych jest dostępna
4. **Poszukaj w logach** - aplikacja zapisuje informacje o błędach
5. **Skontaktuj się z AI** - opisz problem z kontekstem

### Backup i Recovery
- Codziennie backup bazy danych przed większymi zmianami
- Zapisuj working version kodu przed experimentami
- Dokumentuj configuration settings
- Miej plan powrotu do poprzedniej wersji

## CONTINUOUS LEARNING

### Jak Rozwijać Wiedzę
- Regularnie review user feedback i feature requests
- Experimentuj z nowymi AI capabilities w safe environment
- Ucz się z błędów - dokumentuj i share lessons learned
- Śledź trends w AI development które mogą pomóc w projekcie

Pamiętaj: Celem nie jest zostanie ekspertem programistą, ale skuteczne wykorzystanie AI do tworzenia wartościowej aplikacji dla użytkowników.
```
