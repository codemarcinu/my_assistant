# FoodSave AI - Cursor Rules for Preventing Technical Issues

You are an expert Full-Stack AI assistant for the FoodSave AI project. This application uses Python/FastAPI backend with SQLAlchemy, Next.js 14/TypeScript frontend, and comprehensive testing. Follow these rules to prevent the technical issues identified in previous analysis.

## CRITICAL ANTI-PATTERNS - NEVER DO THESE

### đŤ SQLAlchemy Multiple Classes Registry Conflicts
```python
# â NEVER USE - Causes mapper initialization errors
class Message(Base):
    __tablename__ = 'messages'
    # This conflicts with other Message classes

# â BAD: String-based relationships without module paths
relationship("Message", back_populates="conversation")

# â ALWAYS USE: Full module paths for relationships
relationship("src.backend.models.conversation.Message", back_populates="conversation")
```

### đŤ Agent Factory Registration Issues
```python
# â NEVER LEAVE UNREGISTERED AGENT TYPES
def create_agent(agent_type: str):
    if agent_type not in REGISTERED_AGENTS:
        raise UnsupportedAgentTypeError(f"Agent type {agent_type} not supported")

# â ALWAYS: Proper agent registration with fallback
REGISTERED_AGENTS = {
    "food_classifier": FoodClassifierAgent,
    "inventory_manager": InventoryManagerAgent,
    "donation_coordinator": DonationCoordinatorAgent,
    # Always include fallback
    "default": BaseAgent
}
```

### đŤ Async Test Configuration Problems
```python
# â NEVER: Missing asyncio configuration
# This causes "RuntimeError: no running event loop"

# â ALWAYS: Proper pytest-asyncio setup in pyproject.toml
[tool.pytest.ini_options]
asyncio_mode = "auto"
testpaths = ["tests"]
```

## đ§ PYTHON BACKEND RULES

### SQLAlchemy Best Practices
- ALWAYS use full module paths in `relationship()` declarations
- NEVER create models with duplicate class names across modules
- ALWAYS use `declarative_base()` consistently across all models
- MUST use proper foreign key constraints with full table names
- ALWAYS implement `__repr__` methods for all models for debugging

### FastAPI Structure
```python
# â REQUIRED: Type hints for all functions
@app.post("/food-items/", response_model=schemas.FoodItem)
async def create_food_item(
    item: schemas.FoodItemCreate,
    db: Session = Depends(get_db)
) -> models.FoodItem:
    return service.create_food_item(db=db, item=item)

# â ALWAYS: Use dependency injection for database sessions
# â ALWAYS: Use Pydantic models for request/response validation
# â ALWAYS: Return proper HTTP status codes (201 for creation, 404 for not found)
```

### Agent Pattern Implementation
- ALWAYS implement `BaseAgent` interface for all agents
- MUST register all agent types in `AgentFactory`
- ALWAYS implement health check methods for agents
- NEVER create agents without proper error handling
- ALWAYS use dependency injection for agent dependencies

### Async/Await Patterns
```python
# â REQUIRED: Proper async function signatures
async def process_food_inventory(
    inventory_data: Dict[str, Any]
) -> ProcessingResult:
    try:
        result = await some_async_operation()
        return result
    except Exception as e:
        logger.error(f"Processing failed: {e}")
        raise ProcessingError(f"Failed to process inventory: {e}")
```

## đŻ TYPESCRIPT FRONTEND RULES

### Next.js 14 App Router Structure
- ALWAYS use TypeScript strict mode
- MUST use server components by default, client components only when needed
- ALWAYS implement error boundaries for components
- NEVER use deprecated patterns (Pages Router patterns in App Router)

### Type Safety Requirements
```typescript
// â REQUIRED: Strict interface definitions
interface FoodItem {
  id: string;
  name: string;
  category: FoodCategory;
  expirationDate: Date;
  quantity: number;
}

// â ALWAYS: Use generic types for API responses
interface ApiResponse<T> {
  data: T;
  status: 'success' | 'error';
  message?: string;
}

// â NEVER: Use 'any' type - always provide specific types
```

### React Query Patterns
```typescript
// â REQUIRED: Proper query key structure
const foodItemsQuery = useQuery({
  queryKey: ['food-items', { category, status }],
  queryFn: () => fetchFoodItems({ category, status }),
  staleTime: 5 * 60 * 1000, // 5 minutes
});

// â ALWAYS: Handle loading and error states
// â ALWAYS: Use proper query invalidation after mutations
```

## đ§Ş TESTING REQUIREMENTS

### Pytest Configuration
```python
# â REQUIRED: pytest.ini or pyproject.toml setup
[tool.pytest.ini_options]
asyncio_mode = "auto"
testpaths = ["tests"]
addopts = "--strict-markers --strict-config --cov=src --cov-report=html"
markers = [
    "slow: marks tests as slow",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests"
]
```

### Async Test Patterns
```python
# â ALWAYS: Use @pytest.mark.asyncio for async tests
@pytest.mark.asyncio
async def test_food_processing():
    # Setup
    mock_data = create_test_food_data()
    
    # Execute
    result = await food_processor.process(mock_data)
    
    # Assert
    assert result.status == ProcessingStatus.SUCCESS
    assert len(result.processed_items) > 0
```

### Mock and Fixture Patterns
```python
# â REQUIRED: Proper fixtures with cleanup
@pytest_asyncio.fixture
async def db_session():
    async with create_test_session() as session:
        yield session
        await session.rollback()

# â ALWAYS: Use spec parameter in mocks to prevent AttributeError
@pytest.fixture
def mock_vector_store():
    mock = Mock(spec=VectorStore)
    mock.is_empty = False  # Ensure required attributes exist
    return mock
```

## đď¸ ARCHITECTURE PATTERNS

### Import Organization
```python
# â REQUIRED: Import order and circular import prevention
# Standard library imports
from typing import Optional, Dict, List
import asyncio
from datetime import datetime

# Third-party imports
from fastapi import FastAPI, Depends
from sqlalchemy.orm import Session

# Local imports - use absolute imports
from src.backend.models.food_item import FoodItem
from src.backend.schemas import food_schema
from src.backend.services.food_service import FoodService

# â NEVER: Relative imports that cause circular dependencies
# â from ..models import FoodItem  # Can cause circular imports
```

### Error Handling Patterns
```python
# â REQUIRED: Custom exception hierarchy
class FoodSaveError(Exception):
    """Base exception for FoodSave application"""
    pass

class ProcessingError(FoodSaveError):
    """Raised when food processing fails"""
    pass

class AgentError(FoodSaveError):
    """Raised when agent operations fail"""
    pass

# â ALWAYS: Proper error context and logging
try:
    result = await process_food_data(data)
except ProcessingError as e:
    logger.error(f"Food processing failed: {e}", extra={"data_id": data.id})
    raise HTTPException(status_code=422, detail=str(e))
```

### Database Session Management
```python
# â REQUIRED: Proper session lifecycle management
async def get_db_session():
    async with async_session() as session:
        try:
            yield session
            await session.commit()
        except Exception:
            await session.rollback()
            raise
        finally:
            await session.close()
```

## đ CODE QUALITY STANDARDS

### Function Design
- MAXIMUM 20 lines per function (excluding docstrings)
- ALWAYS use type hints for parameters and return values
- MUST include docstrings for all public functions
- ALWAYS use descriptive variable names (no `a`, `b`, `x`, `tmp`)
- NEVER use mutable default arguments

### Class Design
```python
# â REQUIRED: Proper class structure
class FoodItemProcessor:
    """Processes food items for inventory management."""
    
    def __init__(self, db_session: AsyncSession, config: ProcessingConfig):
        self.db_session = db_session
        self.config = config
        self._cache: Dict[str, Any] = {}
    
    async def process_item(self, item: FoodItemData) -> ProcessingResult:
        """Process a single food item.
        
        Args:
            item: Food item data to process
            
        Returns:
            ProcessingResult with status and metadata
            
        Raises:
            ProcessingError: If processing fails
        """
        # Implementation here
```

### Documentation Requirements
- ALL public APIs must have docstrings
- ALL complex business logic must have inline comments
- ALL configuration files must have commented examples
- ALWAYS document non-obvious code decisions

## đ PERFORMANCE PATTERNS

### Database Optimization
```python
# â ALWAYS: Use eager loading to prevent N+1 queries
items = await session.execute(
    select(FoodItem)
    .options(joinedload(FoodItem.category))
    .options(joinedload(FoodItem.donations))
)

# â ALWAYS: Use pagination for large result sets
async def get_food_items(
    page: int = 1, 
    size: int = 20
) -> PaginatedResponse[FoodItem]:
    offset = (page - 1) * size
    # Implementation with LIMIT/OFFSET
```

### Frontend Optimization
```typescript
// â REQUIRED: Lazy loading for heavy components
const HeavyComponent = dynamic(() => import('../components/HeavyComponent'), {
  loading: () => <div>Loading...</div>,
  ssr: false
});

// â ALWAYS: Memoize expensive computations
const expensiveValue = useMemo(() => {
  return computeExpensiveValue(data);
}, [data]);
```

## đ MONITORING AND DEBUGGING

### Logging Standards
```python
# â REQUIRED: Structured logging with context
logger.info(
    "Food item processed successfully",
    extra={
        "food_item_id": item.id,
        "processing_time": processing_time,
        "agent_type": agent.type
    }
)

# â ALWAYS: Log errors with full context
logger.error(
    "Agent processing failed",
    extra={
        "agent_id": agent.id,
        "error_type": type(e).__name__,
        "stack_trace": traceback.format_exc()
    }
)
```

### Health Check Implementation
```python
# â REQUIRED: Health checks for all services
@app.get("/health")
async def health_check():
    checks = {
        "database": await check_database_health(),
        "agents": await check_agents_health(),
        "external_apis": await check_external_apis_health()
    }
    
    all_healthy = all(checks.values())
    status_code = 200 if all_healthy else 503
    
    return Response(
        content={"status": "healthy" if all_healthy else "unhealthy", "checks": checks},
        status_code=status_code
    )
```

## đĄď¸ SECURITY REQUIREMENTS

### Input Validation
```python
# â ALWAYS: Validate and sanitize all inputs
from pydantic import BaseModel, validator, constr

class FoodItemCreate(BaseModel):
    name: constr(min_length=1, max_length=100)
    category_id: int
    
    @validator('name')
    def validate_name(cls, v):
        if not v.strip():
            raise ValueError('Name cannot be empty')
        return v.strip()
```

### Authentication Patterns
```typescript
// â REQUIRED: Proper auth state management
const useAuth = () => {
  const [user, setUser] = useState<User | null>(null);
  const [loading, setLoading] = useState(true);
  
  // Implementation with proper error handling
};
```

## đ COMMIT AND PR STANDARDS

### Commit Messages
```
# â REQUIRED: Conventional commit format
feat(backend): add food expiration tracking
fix(frontend): resolve inventory display bug
test(agents): add unit tests for classification agent
docs(api): update food item endpoints documentation
```

### Pull Request Checklist
- [ ] All tests pass (unit, integration, e2e)
- [ ] Code coverage is maintained (>90%)
- [ ] Documentation updated
- [ ] No breaking changes without migration path
- [ ] Performance impact assessed
- [ ] Security implications reviewed

## đŻ SPECIFIC FOODSAVE AI PATTERNS

### Food Classification Rules
```python
# â REQUIRED: Proper food category handling
class FoodCategory(enum.Enum):
    PRODUCE = "produce"
    DAIRY = "dairy"
    MEAT = "meat"
    BAKERY = "bakery"
    CANNED = "canned"
    FROZEN = "frozen"

# â ALWAYS: Use enum values, never raw strings
```

### Donation Coordination
```python
# â REQUIRED: Proper donation status tracking
class DonationStatus(enum.Enum):
    PENDING = "pending"
    APPROVED = "approved"
    IN_TRANSIT = "in_transit"
    DELIVERED = "delivered"
    CANCELLED = "cancelled"
```

REMEMBER: These rules prevent the specific errors identified in the previous analysis:
- AttributeError (VectorStore.is_empty missing)
- Unsupported Agent Type (missing registration)
- AssertionError (improper test setup)
- SQLAlchemy Mapper Initialization (class name conflicts)
- Async Function Support (missing pytest-asyncio config)
- Multiple Classes conflicts (improper relationship definitions)

Always prioritize type safety, proper error handling, and comprehensive testing.
