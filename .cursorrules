
## üìè Project Philosophy

* Focus on maintainability, clarity, and modularity.
* Keep pull requests small, testable, and logically scoped.
* Fail fast, fix early ‚Äì tests should act as your compass.

---

## ‚úÖ Code Style & Format

* Use `black` for code formatting.
* Use `ruff` for linting and code hygiene.
* Always include type hints (`mypy`-compatible).
* Avoid wildcard imports (e.g., `from module import *`).

---

## üß™ Testing Rules

* All new code **must include unit tests**.
* Follow the Test-Driven Development (TDD) principle when possible.
* Each function or class must have at least one happy-path test and one edge-case test.
* Use `pytest` with clear naming: `test_<function>_<scenario>()`.
* Skipped or flaky tests must be clearly marked and justified.

---

## üßê Design Principles

* Each module must follow **Single Responsibility Principle (SRP)**.
* Avoid overengineering ‚Äì prefer clear and pragmatic solutions.
* Minimize side-effects in functions ‚Äì prefer pure functions when feasible.
* Public functions must have docstrings explaining purpose, args, and return types.

---

## üì¶ Modularity & Architecture

* Break large modules into smaller ones with focused logic.
* Favor composition over inheritance, unless the latter adds clear value.
* All agents (e.g. `SearchAgent`, `OCRAgent`) must be **initializable independently** in tests.

---

## üõ°Ô∏è Error Handling

* All API endpoints must return appropriate `HTTPException` responses.
* Validate all inputs explicitly. Do not rely solely on Pydantic defaults.
* Always handle potential exceptions in file and DB operations gracefully.

---

## üèóÔ∏è CI/CD & Tooling

* CI must run `pytest`, `ruff`, `mypy`, and `bandit` on every push and PR.
* Coverage should be at least **85%** for critical modules (e.g., `orchestrator.py`, `agents/`).
* No code should reach `main` without passing all checks.

### ‚ö° DevOps Starter Pack Setup

A `pyproject.toml` file should include configuration for:

* `black` for formatting
* `ruff` for linting
* `mypy` for static typing
* `pytest` with `pytest-cov` for testing
* `bandit` for security scanning
* `pre-commit` hooks integrating all the above

This setup will ensure that every commit is checked, formatted, and validated before merging.

---

## üìö Documentation

* Every public module and class must be documented.
* Update `README.md` or module-level `.md` files when adding significant functionality.

---

## üí° Cursor Agent Instructions

* Always prefer **code simplification** over adding complexity.
* Refactor before adding new logic if existing code is hard to extend.
* Suggest and implement test scaffolds when none exist.
* When adding a new function or class:

  * Create a corresponding test.
  * Add type hints and docstring.
* When in doubt ‚Äì **ask before changing large portions of code.**

---

## üßπ Optional Enhancements

* Propose refactors that reduce cyclomatic complexity.
* Replace repeated logic with shared utility functions (e.g., `utils.py`).
* Flag deprecated patterns or imports.
* Recommend splitting large functions >40 lines into smaller parts.

---

## ‚ùå What NOT to do

* Do not skip tests without justification.
* Do not bypass type checking or lint rules.
* Do not mix unrelated concerns in a single file or function.
* Do not use global state without clear scoping or purpose.

---

## ‚ú® Final Notes

Cursor AI is your pair programmer, not your boss. Use these rules to guide it to produce clean, modular, and testable code. Stay sharp, commit often, and automate everything you can.

Happy coding!
