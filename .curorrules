## 🎯 Project Context

FoodSave AI is a multi-agent system designed to help users manage food, generate shopping plans, extract receipt data via OCR, and interact with AI agents locally through FastAPI and a Next.js frontend. The creator of this project is **not a developer**, but a tech-savvy tool user. The agent must therefore operate **autonomously, but iteratively** — offering guidance, code generation, and feedback with high clarity and empathy.

**All assistant interactions must be in Polish**, but code, commit messages, and documentation may remain in English unless otherwise specified.

---

## 🧠 Agent Behavior

* Work autonomously, iteratively, and proactively
* Explain changes in plain terms (in Polish)
* Assume user understands tools, not low-level implementation
* Default to small, incremental steps unless requested otherwise

---

## 🚀 Git Workflow

* Use Git Flow: `main`, `develop`, `feature/*`, `bugfix/*`, `release/*`, `hotfix/*`
* Commit frequently (every \~10–30 min of progress)
* Format: Conventional Commits

**Examples:**

```bash
feat(ocr-agent): add support for Polish receipt layout
fix(rag-agent): resolve async bug in FAISS client
```

* Push changes at least every 60 minutes of work
* Auto-push after merge, rebase, or multiple commits
* Warn if unpushed commits accumulate for over 2 hours

---

## 📁 Project Structure

### Backend (Python, FastAPI)

```
src/backend/
├── agents/             # AI Agents (Chef, Weather, OCR, RAG, etc.)
├── api/                # FastAPI routes
├── core/               # Vector store, memory, LLM clients
├── models/             # SQLAlchemy models
├── infrastructure/     # Redis, Prometheus, FAISS
└── tests/              # Unit, integration, performance, E2E
```

### Frontend (Next.js, TypeScript)

```
foodsave-frontend/src/
├── app/                # App router
├── components/         # UI Components
├── hooks/              # Custom hooks
├── services/           # API logic
├── types/              # TypeScript interfaces
└── tests/              # Unit and E2E tests
```

---

## 🧪 Testing

* Use `pytest`, `pytest-asyncio`, `pytest-cov` for backend
* Use Jest/React Testing Library or Playwright for frontend
* Maintain 85%+ coverage (90%+ for AI agents)
* Use `make_llm_chat_mock()` for mocking LLM responses

---

## 🖋️ Coding Standards

### Python

* Use `black`, `isort`, `flake8`, `mypy`
* Always type hint
* Use `Pydantic` for schema validation
* Agents inherit from `EnhancedBaseAgent`

### TypeScript

* Use strict mode
* All components typed using `React.FC` and custom interfaces
* Use Tailwind for styling, avoid unscoped CSS

---

## 🛠️ Development Setup

* Use `poetry` for Python dependency management
* Use `docker-compose.dev.yml` for local dev
* Scripts:

  ```bash
  ./run_all.sh      # Start backend and frontend
  ./stop_all.sh     # Stop services
  ./rebuild.sh      # Rebuild Docker containers
  ```

---

## 📚 Documentation

* Keep `README.md` updated
* Document all FastAPI endpoints with `summary`, `description`, and examples
* Use `/docs` (Swagger) and `/redoc` for API reference

---

## 🛡️ Monitoring & Security

* Enable `/metrics`, `/health`, `/ready`, `/api/v1/status`
* Use `structlog` for logging
* Validate input via `Pydantic` models
* Avoid secrets and `.env` in Git

---

## 🇵🇱 Polish Language Rule

All explanations, suggestions, errors, and agent responses should be given in **Polish**, unless the user explicitly switches to English.

---

EOF - This rule set ensures consistent development and high usability for FoodSave AI ✨
