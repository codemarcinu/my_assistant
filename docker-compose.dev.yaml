services:
  # Serwis Ollama dla lokalnych modeli LLM
  ollama:
    image: ollama/ollama:latest
    container_name: foodsave-ollama-dev
    ports:
      - "11434:11434"
    volumes:
      - ollama_data:/root/.ollama
      - ./logs/ollama:/var/log/ollama
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: 1
              capabilities: [gpu]
    networks:
      - foodsave-network
    environment:
      - OLLAMA_HOST=${OLLAMA_HOST:-0.0.0.0}
      - OLLAMA_KEEP_ALIVE=${OLLAMA_KEEP_ALIVE:-24h}
    command: serve
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
        tag: "{{.Name}}/{{.ID}}"

  # Backend FastAPI - Development Mode
  backend:
    build:
      context: .
      dockerfile: src/backend/Dockerfile.dev
    container_name: foodsave-backend-dev
    ports:
      - "8000:8000"
    volumes:
      - ./:/app  # Mapowanie całego katalogu projektu
      - ./logs/backend:/app/logs
    environment:
      - PYTHONPATH=/app:/app/src
      - ENVIRONMENT=${ENVIRONMENT:-development}
      - LOG_LEVEL=${LOG_LEVEL:-DEBUG}
      - DATABASE_URL=postgresql://foodsave:foodsave_dev_password@postgres:5432/foodsave_dev
      - OLLAMA_URL=http://ollama:11434
      - OLLAMA_BASE_URL=http://ollama:11434
      - OLLAMA_MODEL=${OLLAMA_MODEL:-gemma3:12b}
      - DEFAULT_CHAT_MODEL=${DEFAULT_CHAT_MODEL:-gemma3:12b}
      - DEFAULT_CODE_MODEL=${DEFAULT_CODE_MODEL:-gemma3:12b}
      - DEFAULT_EMBEDDING_MODEL=${DEFAULT_EMBEDDING_MODEL:-nomic-embed-text}
      - RAG_VECTOR_STORE_PATH=${RAG_VECTOR_STORE_PATH:-/app/data/vector_store_dev}
      - CORS_ORIGINS=${CORS_ORIGINS:-http://localhost:3000,http://frontend:3000}
    networks:
      - foodsave-network
    depends_on:
      - ollama
      - postgres
    command: ["uvicorn", "main:app", "--host", "0.0.0.0", "--port", "8000", "--reload", "--log-level=debug"]
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
        tag: "{{.Name}}/{{.ID}}"

  # Frontend Next.js - Development Mode
  frontend:
    build:
      context: ./foodsave-frontend
      dockerfile: Dockerfile.dev
    container_name: foodsave-frontend-dev
    ports:
      - "3000:3000"
    volumes:
      - ./foodsave-frontend:/app
      - frontend_node_modules:/app/node_modules
      - ./logs/frontend:/app/logs
    environment:
      - NODE_ENV=${NODE_ENV:-development}
      - NEXT_PUBLIC_API_URL=http://localhost:8000
      - NEXT_TELEMETRY_DISABLED=1
    networks:
      - foodsave-network
    depends_on:
      - backend
    healthcheck:
      test: ["CMD-SHELL", "wget -q --spider http://localhost:3000/ || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 120s
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
        tag: "{{.Name}}/{{.ID}}"

  # PostgreSQL Database
  postgres:
    image: postgres:15
    container_name: foodsave-postgres-dev
    ports:
      - "5433:5432"  # Unikanie konfliktu portów
    environment:
      - POSTGRES_DB=${POSTGRES_DB:-foodsave_dev}
      - POSTGRES_USER=${POSTGRES_USER:-foodsave}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-foodsave_dev_password}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./logs/postgres:/var/log/postgresql
    networks:
      - foodsave-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-foodsave}"]
      interval: 10s
      timeout: 5s
      retries: 5

volumes:
  ollama_data:
    driver: local
  postgres_data:
    driver: local
  frontend_node_modules:
    driver: local

networks:
  foodsave-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
