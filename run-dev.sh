#!/bin/bash

# FoodSave AI - Development Environment Startup Script
# Skrypt do uruchamiania wszystkich kontener√≥w w trybie developerskim

set -e

# Kolory dla outputu
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Funkcje pomocnicze
log_info() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

log_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

log_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

log_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

# Sprawdzenie wymaga≈Ñ
check_requirements() {
    log_info "Sprawdzanie wymaga≈Ñ systemowych..."
    
    if ! command -v docker &> /dev/null; then
        log_error "Docker nie jest zainstalowany"
        exit 1
    fi
    
    if ! command -v docker compose &> /dev/null; then
        log_error "Docker Compose nie jest zainstalowany"
        exit 1
    fi
    
    # Sprawdzenie czy Docker daemon dzia≈Ça
    if ! docker info &> /dev/null; then
        log_error "Docker daemon nie dzia≈Ça. Uruchom: sudo systemctl start docker"
        exit 1
    fi
    
    log_success "Wymagania spe≈Çnione"
}

# Przygotowanie ≈õrodowiska
prepare_environment() {
    log_info "Przygotowanie ≈õrodowiska developerskiego..."
    
    # Kopiowanie pliku konfiguracyjnego je≈õli nie istnieje
    if [ ! -f .env ]; then
        if [ -f env.dev ]; then
            cp env.dev .env
            log_success "Skopiowano konfiguracjƒô z env.dev"
        else
            log_warning "Brak pliku env.dev, u≈ºywam domy≈õlnej konfiguracji"
        fi
    fi
    
    # Tworzenie katalog√≥w dla log√≥w
    mkdir -p logs/{backend,frontend,postgres,redis,ollama,prometheus,grafana,loki}
    mkdir -p data/{vector_store_dev,search_cache,config}
    
    log_success "≈örodowisko przygotowane"
}

# Zatrzymanie istniejƒÖcych kontener√≥w
stop_existing() {
    log_info "Zatrzymywanie istniejƒÖcych kontener√≥w..."
    
    if docker compose -f docker-compose.dev.yaml ps --services --filter "status=running" | grep -q .; then
        docker compose -f docker-compose.dev.yaml down
        log_success "IstniejƒÖce kontenery zatrzymane"
    else
        log_info "Brak uruchomionych kontener√≥w"
    fi
}

# Budowanie kontener√≥w
build_containers() {
    log_info "Budowanie kontener√≥w..."
    
    # Budowanie z cache dla szybszego startu
    docker compose -f docker-compose.dev.yaml build --parallel
    
    log_success "Kontenery zbudowane"
}

# Uruchamianie serwis√≥w
start_services() {
    log_info "Uruchamianie serwis√≥w..."
    
    # Uruchamianie podstawowych serwis√≥w
    docker compose -f docker-compose.dev.yaml up -d postgres redis ollama
    
    log_info "Oczekiwanie na inicjalizacjƒô bazy danych i Redis..."
    sleep 10
    
    # Sprawdzenie health check dla postgres i redis
    log_info "Sprawdzanie statusu serwis√≥w..."
    
    # Czekanie na gotowo≈õƒá postgres
    until docker compose -f docker-compose.dev.yaml exec -T postgres pg_isready -U foodsave -d foodsave_dev; do
        log_info "Oczekiwanie na PostgreSQL..."
        sleep 5
    done
    
    # Czekanie na gotowo≈õƒá redis
    until docker compose -f docker-compose.dev.yaml exec -T redis redis-cli ping; do
        log_info "Oczekiwanie na Redis..."
        sleep 5
    done
    
    # Czekanie na gotowo≈õƒá ollama
    until curl -f http://localhost:11434/api/version &> /dev/null; do
        log_info "Oczekiwanie na Ollama..."
        sleep 10
    done
    
    log_success "Serwisy podstawowe gotowe"
    
    # Uruchamianie backendu
    log_info "Uruchamianie backendu..."
    docker compose -f docker-compose.dev.yaml up -d backend
    
    # Czekanie na gotowo≈õƒá backendu
    until curl -f http://localhost:8000/health &> /dev/null; do
        log_info "Oczekiwanie na backend..."
        sleep 5
    done
    
    log_success "Backend gotowy"
    
    # Uruchamianie frontendu
    log_info "Uruchamianie frontendu..."
    docker compose -f docker-compose.dev.yaml up -d frontend
    
    # Uruchamianie monitoring (opcjonalnie)
    if [ "$1" = "--with-monitoring" ]; then
        log_info "Uruchamianie monitoring..."
        docker compose -f docker-compose.dev.yaml up -d prometheus grafana loki promtail
    fi
    
    log_success "Wszystkie serwisy uruchomione"
}

# Sprawdzenie statusu
check_status() {
    log_info "Sprawdzanie statusu serwis√≥w..."
    
    echo ""
    echo "=== STATUS KONTENER√ìW ==="
    docker compose -f docker-compose.dev.yaml ps
    
    echo ""
    echo "=== ENDPOINTS ==="
    echo "Frontend:     http://localhost:3000"
    echo "Backend API:  http://localhost:8000"
    echo "API Docs:     http://localhost:8000/docs"
    echo "Ollama API:   http://localhost:11434"
    echo "PostgreSQL:   localhost:5433"
    echo "Redis:        localhost:6380"
    
    if docker compose -f docker-compose.dev.yaml ps | grep -q prometheus; then
        echo "Prometheus:   http://localhost:9090"
        echo "Grafana:      http://localhost:3001 (admin/admin)"
        echo "Loki:         http://localhost:3100"
    fi
    
    echo ""
    echo "=== LOGI ==="
    echo "Backend:      docker compose -f docker-compose.dev.yaml logs -f backend"
    echo "Frontend:     docker compose -f docker-compose.dev.yaml logs -f frontend"
    echo "PostgreSQL:   docker compose -f docker-compose.dev.yaml logs -f postgres"
    echo "Ollama:       docker compose -f docker-compose.dev.yaml logs -f ollama"
    echo "Redis:        docker compose -f docker-compose.dev.yaml logs -f redis"
}

# Funkcja pomocy
show_help() {
    echo "FoodSave AI - Development Environment"
    echo ""
    echo "U≈ºycie: $0 [OPCJE]"
    echo ""
    echo "Opcje:"
    echo "  --with-monitoring    Uruchom z monitoringiem (Prometheus, Grafana, Loki)"
    echo "  --rebuild           Przebuduj wszystkie kontenery"
    echo "  --stop              Zatrzymaj wszystkie kontenery"
    echo "  --logs              Poka≈º logi wszystkich serwis√≥w"
    echo "  --status            Poka≈º status serwis√≥w"
    echo "  --help              Poka≈º tƒô pomoc"
    echo ""
    echo "Przyk≈Çady:"
    echo "  $0                  Uruchom podstawowe serwisy"
    echo "  $0 --with-monitoring Uruchom z monitoringiem"
    echo "  $0 --rebuild        Przebuduj i uruchom"
}

# G≈Ç√≥wna logika
main() {
    case "${1:-}" in
        --help)
            show_help
            exit 0
            ;;
        --stop)
            log_info "Zatrzymywanie wszystkich kontener√≥w..."
            docker compose -f docker-compose.dev.yaml down
            log_success "Kontenery zatrzymane"
            exit 0
            ;;
        --logs)
            log_info "Pokazywanie log√≥w wszystkich serwis√≥w..."
            docker compose -f docker-compose.dev.yaml logs -f
            exit 0
            ;;
        --status)
            check_status
            exit 0
            ;;
        --rebuild)
            log_info "Przebudowywanie kontener√≥w..."
            docker compose -f docker-compose.dev.yaml down
            docker compose -f docker-compose.dev.yaml build --no-cache --parallel
            ;;
    esac
    
    log_info "üöÄ Uruchamianie FoodSave AI w trybie developerskim..."
    
    check_requirements
    prepare_environment
    stop_existing
    build_containers
    start_services "$@"
    check_status
    
    log_success "‚úÖ FoodSave AI jest gotowy do pracy!"
    log_info "üí° U≈ºyj '$0 --help' aby zobaczyƒá dostƒôpne opcje"
}

# Uruchomienie g≈Ç√≥wnej funkcji
main "$@" 